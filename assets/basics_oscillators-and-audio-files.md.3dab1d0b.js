import{_ as s,o as n,c as a,Q as o}from"./chunks/framework.9f45b8e0.js";const e="/webaudio-tutorials/assets/create-project.f24be2c3.png",l="/webaudio-tutorials/assets/project-structure.25209d22.png",t="/webaudio-tutorials/assets/audio-context-resume.5dc7b1d6.png",p="/webaudio-tutorials/assets/sample-dir.00783cc3.png",c="/webaudio-tutorials/assets/audio-buffer.88517ce0.png",b=JSON.parse('{"title":"Oscillators and Audio Files","description":"","frontmatter":{},"headers":[],"relativePath":"basics/oscillators-and-audio-files.md","filePath":"basics/oscillators-and-audio-files.md"}'),r={name:"basics/oscillators-and-audio-files.md"},F=o('<h1 id="oscillators-and-audio-files" tabindex="-1">Oscillators and Audio Files <a class="header-anchor" href="#oscillators-and-audio-files" aria-label="Permalink to &quot;Oscillators and Audio Files&quot;">​</a></h1><p>In this tutorial, we will learn how to use some basic building blocks of the Web Audio API.</p><h3 id="related-documentation" tabindex="-1">Related Documentation <a class="header-anchor" href="#related-documentation" aria-label="Permalink to &quot;Related Documentation&quot;">​</a></h3><ul><li><a href="https://developer.mozilla.org/docs/Web/API/AudioContext" target="_blank" rel="noreferrer"><code>AudioContext</code></a></li><li><a href="https://developer.mozilla.org/docs/Web/API/OscillatorNode" target="_blank" rel="noreferrer"><code>OscillatorNode</code></a></li><li><a href="https://developer.mozilla.org/docs/Web/API/GainNode" target="_blank" rel="noreferrer"><code>GainNode</code></a></li><li><a href="https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode" target="_blank" rel="noreferrer"><code>AudioBufferSourceNode</code></a></li><li><a href="https://developer.mozilla.org/docs/Web/API/AudioBuffer" target="_blank" rel="noreferrer"><code>AudioBuffer</code></a></li></ul><h2 id="setting-up-the-project" tabindex="-1">Setting up the project <a class="header-anchor" href="#setting-up-the-project" aria-label="Permalink to &quot;Setting up the project&quot;">​</a></h2><p>Let&#39;s start with creating a new project, open a <code>Terminal</code> and write the following command to create the tutorial directory:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">mkdir</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">-p</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">~/Desktop/webaudio-tutorials/02-oscillators-and-audio-files</span></span></code></pre></div><p>Press <code>Enter</code> to execute the command, the go to the directory:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;">cd</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">~/Desktop/webaudio-tutorials/02-oscillators-and-audio-files</span></span></code></pre></div><p>And start the server</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">serve</span></span></code></pre></div><p><img src="'+e+`" alt="create-project"></p><p>Then open the directory in your text editor, and create an HTML file called <code>index.html</code> with the following content:</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#F8F8F2;">&lt;!</span><span style="color:#F92672;">DOCTYPE</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">html</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">html</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">head</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#F92672;">meta</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">charset</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;utf-8&quot;</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#F92672;">meta</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">name</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;viewport&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">content</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;width=device-width, initial-scale=1&quot;</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#F92672;">title</span><span style="color:#F8F8F2;">&gt;02-audio-file-playback&lt;/</span><span style="color:#F92672;">title</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#F92672;">script</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">defer</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">type</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;module&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">src</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;./main.js&quot;</span><span style="color:#F8F8F2;">&gt;&lt;/</span><span style="color:#F92672;">script</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#F92672;">head</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">body</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#F92672;">h1</span><span style="color:#F8F8F2;">&gt;Audio file playback&lt;/</span><span style="color:#F92672;">h1</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#F92672;">body</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#F92672;">html</span><span style="color:#F8F8F2;">&gt;</span></span></code></pre></div><p>As you can see in the highlighted line, the HTML will try to import a JavaScript file called <code>main.js</code>, so let&#39;s create this file:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Hello&#39;</span><span style="color:#F8F8F2;">);</span></span></code></pre></div><p>If you open a Web browser at <a href="http://localhost:3000" target="_blank" rel="noreferrer">http://localhost:3000</a>, and open the JavaScript console, you should see the following:</p><p><img src="`+l+`" alt="project-structure"></p><h2 id="creating-and-resuming-the-audiocontext" tabindex="-1">Creating and resuming the <code>AudioContext</code> <a class="header-anchor" href="#creating-and-resuming-the-audiocontext" aria-label="Permalink to &quot;Creating and resuming the \`AudioContext\`&quot;">​</a></h2><p>As described in the <a href="./web-audio-api-introduction.html">previous step</a> a Web Audio graph is always created within an <a href="https://developer.mozilla.org/docs/Web/API/AudioContext" target="_blank" rel="noreferrer"><code>AudioContext</code></a>.</p><p>So let&#39;s first create our first <code>AudioContext</code>:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// main.js</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> audioContext </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">AudioContext</span><span style="color:#F8F8F2;">();</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The first line in the snippet above, i.e. <code>// main.js</code> is not meant to be added to the code, but just to remind you in which file the snippet is located. The way the line will be written will differ according to the language of the file but will always correspond to a comment in this language, e.g.:</p><ul><li>In JavaScript you will see something like: <code>// main.js</code></li><li>In HTML you will see something like: <code>&lt;!-- index.html --&gt;</code></li><li>In CSS you will see something like: <code>/* style.css */</code></li></ul><p>We will often use this convention in these tutorials.</p></div><p>In this snippet, we create new instance of <code>AudioContext</code> that we store into a variable called <code>audioContext</code>.</p><p>By default, a new <code>AudioContext</code> is always created with a &quot;suspended&quot; state, which means that no audio will be produced even if asked gently. To &quot;resume&quot; the state, we will need to call a specific method, which much called when the user interact with the page. This restriction is primarily made to prevent Web browser to play some sound (e.g. for advertising...) each time you open a Web page.</p><p>The let&#39;s first add a button in our HTML file, that we will use to active the context.</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#88846F;">&lt;!-- index.html --&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">body</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#F92672;">h1</span><span style="color:#F8F8F2;">&gt;Audio file playback&lt;/</span><span style="color:#F92672;">h1</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#F92672;">button</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">id</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;resume-context&quot;</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    Resume Audio Context</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  &lt;/</span><span style="color:#F92672;">button</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#F92672;">body</span><span style="color:#F8F8F2;">&gt;</span></span></code></pre></div><p>Then in the javascript, we can listen for an &#39;click&#39; event from the user on this button to resume our <code>AudioContext</code>:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#88846F;">// main.js</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> audioContext </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">AudioContext</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#88846F;">// grab a JavaScript representation to the HTML button with id &quot;resume-context&quot;</span></span>
<span class="line highlighted"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> resumeButton </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> document.</span><span style="color:#A6E22E;">querySelector</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;#resume-context&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line highlighted"><wbr></span>
<span class="line highlighted"><span style="color:#88846F;">// define a function to be executed when the user click on the button</span></span>
<span class="line highlighted"><span style="color:#F92672;">async</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">resumeContext</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> audioContext.</span><span style="color:#A6E22E;">resume</span><span style="color:#F8F8F2;">();</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;audioContext.state:&#39;</span><span style="color:#F8F8F2;">, audioContext.state);</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">}</span></span>
<span class="line highlighted"><wbr></span>
<span class="line highlighted"><span style="color:#88846F;">// register the \`resumeContext\` as a callback to be executed</span></span>
<span class="line highlighted"><span style="color:#88846F;">// when the clicks on the button</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">resumeButton.</span><span style="color:#A6E22E;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;click&#39;</span><span style="color:#F8F8F2;">, resumeContext);</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The <code>async</code> and <code>await</code> keyword that you see in the declaration of the <code>resumeContext</code> function refer to what is called <em>asynchronous operations</em>. Without going into much detail, you can think of asynchronous operations as operations that have to deal with the underlying system and may take a time that is unknown, e.g. downloading a file is an asynchronous operation as the time it takes to download a file may differ depending of the weight of the file, of the quality of your internet connection, etc.</p><p>The <code>audioContext.resume()</code> call is asynchronous because the browser needs to ask the system access the sound card and to open a new high priority process (or <em>thread</em>) in which the audio will be computed. The <code>await</code> keyword just means that we wait for the command to be executed before excuting the next line of code.</p><p>You will see a lot of asynchronous code when using JavaScript so it&#39;s important to understand this concept a bit.</p></div><p>If you click on the button, you should see the log appear in the console confirming that the status of the <code>audioContext</code> is now &quot;running&quot;, which means eveything is ready to produce some sounds.</p><p><img src="`+t+`" alt="audio-context-resume"></p><h2 id="using-the-oscillatornode" tabindex="-1">Using the <code>OscillatorNode</code> <a class="header-anchor" href="#using-the-oscillatornode" aria-label="Permalink to &quot;Using the \`OscillatorNode\`&quot;">​</a></h2><p>Now that our context is &quot;running&quot;, we can use it to play actual sounds with the Web Audio API. Let&#39;s start with the a simple <a href="https://developer.mozilla.org/docs/Web/API/OscillatorNode" target="_blank" rel="noreferrer"><code>OscillatorNode</code></a></p><p>Let&#39;s first add another button into our HTML</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#88846F;">&lt;!-- index.html --&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">button</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">id</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;resume-context&quot;</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  Resume Audio Context</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#F92672;">button</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">button</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">id</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;trigger-osc&quot;</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  Trigger Oscillator</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#F92672;">button</span><span style="color:#F8F8F2;">&gt;</span></span></code></pre></div><p>And grab a reference to it in the JavaScript, as we did for the <code>#resume-context</code> button:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#88846F;">// index.js</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> resumeButton </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> document.</span><span style="color:#A6E22E;">querySelector</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;#resume-context&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line highlighted"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> triggerOscButton </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> document.</span><span style="color:#A6E22E;">querySelector</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;#trigger-osc&#39;</span><span style="color:#F8F8F2;">);</span></span></code></pre></div><p>Then, we can create and start a new <code>OscillatorNode</code> each time the user clicks on the button.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#88846F;">// main.js</span></span>
<span class="line"><span style="color:#F8F8F2;">resumeButton.</span><span style="color:#A6E22E;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;click&#39;</span><span style="color:#F8F8F2;">, resumeContext);</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#88846F;">// function that creates and start a new oscillator</span></span>
<span class="line highlighted"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">triggerOsc</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// create a new oscillator</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> osc </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> audioContext.</span><span style="color:#A6E22E;">createOscillator</span><span style="color:#F8F8F2;">();</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// connect it to the audio output, i.e. the \`DestinationNode\`</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  osc.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(audioContext.destination);</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// start the oscillator as fast as we can</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  osc.</span><span style="color:#A6E22E;">start</span><span style="color:#F8F8F2;">();</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">}</span></span>
<span class="line highlighted"><wbr></span>
<span class="line highlighted"><span style="color:#88846F;">// create an oscillator each time the button is clicked</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">triggerOscButton.</span><span style="color:#A6E22E;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;click&#39;</span><span style="color:#F8F8F2;">, triggerOsc);</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Remember that each time you reload the page, you face a brand new <code>AudioContext</code>, therefore don&#39;t forget to click on the &quot;resume context&quot; button first.</p></div><h3 id="setting-the-frequency" tabindex="-1">Setting the frequency <a class="header-anchor" href="#setting-the-frequency" aria-label="Permalink to &quot;Setting the frequency&quot;">​</a></h3><p>If you click several time on the button, you will hear the sound slightly changing. Indeed each time you click the button, you create a new oscillator with default frequency (i.e. 440Hz), which produces phasing and distortion effects when they pile up.</p><p>Let&#39;s change a bit our <code>triggerOsc</code> function to modify the frequency of each of the oscillators:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// create a new oscillator</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> osc </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> audioContext.</span><span style="color:#A6E22E;">createOscillator</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#88846F;">// pick a random frequency between 100 and 1000 Hz</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> freq </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> Math.</span><span style="color:#A6E22E;">random</span><span style="color:#F8F8F2;">() </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">900</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#88846F;">// apply this frequency to oscillator</span></span>
<span class="line"><span style="color:#F8F8F2;">osc.frequency.value </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> freq;</span></span>
<span class="line"><span style="color:#88846F;">// connect it to the audio output, i.e. the \`DestinationNode\`</span></span>
<span class="line"><span style="color:#F8F8F2;">osc.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(audioContext.destination);</span></span></code></pre></div><p>If you reload the page, resume the context and click on the button you will now ear the different oscillators piling up at different frequency. The sound will still get distorded at some point but at least you can ear the effect of triggering these oscillator.</p><p>When we added this line:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">osc.frequency.value </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> freq;</span></span></code></pre></div><p>We actually changed an <a href="https://developer.mozilla.org/docs/Web/API/AudioParam" target="_blank" rel="noreferrer"><code>AudioParam</code></a> called <code>frequency</code> that is linked to the oscillator. Most <code>AudioNode</code>s have such parameters that allows to modify their behavior and create automations.</p><h3 id="adding-an-envelop" tabindex="-1">Adding an envelop <a class="header-anchor" href="#adding-an-envelop" aria-label="Permalink to &quot;Adding an envelop&quot;">​</a></h3><p>To dig a bit more into <code>AudioParam</code>s, let&#39;s use a <a href="https://developer.mozilla.org/docs/Web/API/GainNode" target="_blank" rel="noreferrer"><code>GainNode</code></a> to add an envelop to each of our oscillators</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// create a gain node and set its gain value to 0</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> env </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> audioContext.</span><span style="color:#A6E22E;">createGain</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">env.gain.value </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#88846F;">// start the oscillator as fast as we can</span></span>
<span class="line"><span style="color:#F8F8F2;">osc.</span><span style="color:#A6E22E;">start</span><span style="color:#F8F8F2;">();</span></span></code></pre></div><p>Then schedule we need to schedule automation, here we will for example make a linear ramp from 0 to 1 in 10ms and then go from 1 to 0 in ~1sec.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// create a gain node and set its gain value to 0</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> env </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> audioContext.</span><span style="color:#A6E22E;">createGain</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">env.gain.value </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#88846F;">// pick the context current time in seconds</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> now </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> audioContext.currentTime;</span></span>
<span class="line"><span style="color:#F8F8F2;">env.gain.</span><span style="color:#A6E22E;">setValueAtTime</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, nows); </span><span style="color:#88846F;">// create an automation point</span></span>
<span class="line"><span style="color:#F8F8F2;">env.gain.</span><span style="color:#A6E22E;">linearRampToValueAtTime</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, now </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0.01</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// ramp to 1 in 10ms</span></span>
<span class="line"><span style="color:#F8F8F2;">env.gain.</span><span style="color:#A6E22E;">linearRampToValueAtTime</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, now </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// ramp to 1 in 10ms</span></span></code></pre></div><p>Then let&#39;s modify how the graph is created to pipe the oscillator into the envelop before sending it to destination:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-diff"><code><span class="line diff remove"><span style="color:#88846F;">// connect it to the audio output, i.e. the \`DestinationNode\`  </span></span>
<span class="line diff remove"><span style="color:#F8F8F2;">osc.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(audioContext.destination); </span></span>
<span class="line"><span style="color:#88846F;">// create a gain node and set its gain value to 0</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> env </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> audioContext.</span><span style="color:#A6E22E;">createGain</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">env.gain.value </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#88846F;">// pick the context current time in seconds</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> now </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> audioContext.currentTime;</span></span>
<span class="line"><span style="color:#F8F8F2;">env.gain.</span><span style="color:#A6E22E;">setValueAtTime</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, now); </span><span style="color:#88846F;">// create an automation point</span></span>
<span class="line"><span style="color:#F8F8F2;">env.gain.</span><span style="color:#A6E22E;">linearRampToValueAtTime</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, now </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0.01</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// ramp to 1 in 10ms</span></span>
<span class="line"><span style="color:#F8F8F2;">env.gain.</span><span style="color:#A6E22E;">linearRampToValueAtTime</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, now </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// ramp to 1 in 10ms</span></span>
<span class="line"><span style="color:#88846F;">// create the graph chain: osc -&gt; env -&gt; output</span></span>
<span class="line"><span style="color:#F8F8F2;">osc.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(env).</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(audioContext.destination);</span></span></code></pre></div><p>If you reload the page and trigger some oscillator you should ear the ramp applied to each triggered oscillators.</p><p>However, there is still an issue with our code. Indeed, our oscillators are started but they are never stopped which might lead to waste of resources if click a lot of time on the button. As we know the exact start and end time of our ramp, we can know explicitely control the oscillators so that they start at the beginning of the ramp and stop exactly when the ramp goes back to zero.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-diff"><code><span class="line diff remove"><span style="color:#88846F;">// start the oscillator as fast as we can </span></span>
<span class="line diff remove"><span style="color:#F8F8F2;">osc.</span><span style="color:#A6E22E;">start</span><span style="color:#F8F8F2;">(); </span></span>
<span class="line diff add"><span style="color:#88846F;">// start the oscillator when the ramp start and stop it when </span></span>
<span class="line diff add"><span style="color:#88846F;">// it goes back to zero, i.e. 1 sec later </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">osc.</span><span style="color:#A6E22E;">start</span><span style="color:#F8F8F2;">(now); </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">osc.</span><span style="color:#A6E22E;">stop</span><span style="color:#F8F8F2;">(now </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">); </span></span></code></pre></div><p>Finally, let&#39;s fix the clipping issue that occur when we trigger mutliple oscillators in a short period of time, and make our envelop a little bit nicer:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-diff"><code><span class="line diff remove"><span style="color:#F8F8F2;">env.gain.</span><span style="color:#A6E22E;">linearRampToValueAtTime</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, now </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0.01</span><span style="color:#F8F8F2;">); </span></span>
<span class="line diff remove"><span style="color:#F8F8F2;">env.gain.</span><span style="color:#A6E22E;">linearRampToValueAtTime</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, now </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">); </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">env.gain.</span><span style="color:#A6E22E;">linearRampToValueAtTime</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0.2</span><span style="color:#F8F8F2;">, now </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0.01</span><span style="color:#F8F8F2;">); </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">env.gain.</span><span style="color:#A6E22E;">exponentialRampToValueAtTime</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0.0001</span><span style="color:#F8F8F2;">, now </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">); </span></span></code></pre></div><h3 id="wrap-up" tabindex="-1">Wrap up <a class="header-anchor" href="#wrap-up" aria-label="Permalink to &quot;Wrap up&quot;">​</a></h3><p>At this point, your <code>index.html</code> and <code>main.js</code> should look like the following</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">&lt;!-- index.html --&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;!</span><span style="color:#F92672;">DOCTYPE</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">html</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">html</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">head</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#F92672;">meta</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">charset</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;utf-8&quot;</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#F92672;">meta</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">name</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;viewport&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">content</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;width=device-width, initial-scale=1&quot;</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#F92672;">title</span><span style="color:#F8F8F2;">&gt;02-audio-file-playback&lt;/</span><span style="color:#F92672;">title</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#F92672;">script</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">defer</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">type</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;module&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">src</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;./main.js&quot;</span><span style="color:#F8F8F2;">&gt;&lt;/</span><span style="color:#F92672;">script</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#F92672;">head</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">body</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#F92672;">h1</span><span style="color:#F8F8F2;">&gt;Oscillators and audio files&lt;/</span><span style="color:#F92672;">h1</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#F92672;">button</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">id</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;resume-context&quot;</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    Resume Audio Context</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;/</span><span style="color:#F92672;">button</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#F92672;">button</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">id</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;trigger-osc&quot;</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    Trigger Oscillator</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;/</span><span style="color:#F92672;">button</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#F92672;">body</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#F92672;">html</span><span style="color:#F8F8F2;">&gt;</span></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> audioContext </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">AudioContext</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// grab a JavaScript representation to the HTML button with id &quot;resume-context&quot;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> resumeButton </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> document.</span><span style="color:#A6E22E;">querySelector</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;#resume-context&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> triggerOscButton </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> document.</span><span style="color:#A6E22E;">querySelector</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;#trigger-osc&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// logic to resume the audio context</span></span>
<span class="line"><span style="color:#F92672;">async</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">resumeContext</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> audioContext.</span><span style="color:#A6E22E;">resume</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;audioContext.state:&#39;</span><span style="color:#F8F8F2;">, audioContext.state);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">resumeButton.</span><span style="color:#A6E22E;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;click&#39;</span><span style="color:#F8F8F2;">, resumeContext);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// logic to trigger oscillators</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">triggerOsc</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> osc </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> audioContext.</span><span style="color:#A6E22E;">createOscillator</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> freq </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> Math.</span><span style="color:#A6E22E;">random</span><span style="color:#F8F8F2;">() </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">900</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  osc.frequency.value </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> freq;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> env </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> audioContext.</span><span style="color:#A6E22E;">createGain</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> now </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> audioContext.currentTime;</span></span>
<span class="line"><span style="color:#F8F8F2;">  env.gain.value </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  env.gain.</span><span style="color:#A6E22E;">setValueAtTime</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, now); </span></span>
<span class="line"><span style="color:#F8F8F2;">  env.gain.</span><span style="color:#A6E22E;">linearRampToValueAtTime</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0.1</span><span style="color:#F8F8F2;">, now </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0.01</span><span style="color:#F8F8F2;">); </span></span>
<span class="line"><span style="color:#F8F8F2;">  env.gain.</span><span style="color:#A6E22E;">exponentialRampToValueAtTime</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0.0001</span><span style="color:#F8F8F2;">, now </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  osc.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(env).</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(audioContext.destination);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  osc.</span><span style="color:#A6E22E;">start</span><span style="color:#F8F8F2;">(now);</span></span>
<span class="line"><span style="color:#F8F8F2;">  osc.</span><span style="color:#A6E22E;">stop</span><span style="color:#F8F8F2;">(now </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">triggerOscButton.</span><span style="color:#A6E22E;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;click&#39;</span><span style="color:#F8F8F2;">, triggerOsc);</span></span></code></pre></div><h2 id="using-the-audiobuffersourcenode" tabindex="-1">Using the <code>AudioBufferSourceNode</code> <a class="header-anchor" href="#using-the-audiobuffersourcenode" aria-label="Permalink to &quot;Using the \`AudioBufferSourceNode\`&quot;">​</a></h2><p><code>OscillatorNode</code>s are really nice indeed, but let&#39;s now consider how we can play a sound file using the <a href="https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode" target="_blank" rel="noreferrer"><code>AudioBufferSourceNode</code></a>.</p><h3 id="load-a-sound-file" tabindex="-1">Load a sound file <a class="header-anchor" href="#load-a-sound-file" aria-label="Permalink to &quot;Load a sound file&quot;">​</a></h3><p>To do so, we will first need to load a file into memory so the Web Audio API can have full control over the playback. Let&#39;s then add some sound file into our project directory:</p><p><img src="`+p+`" alt="sample-dir"></p><p>Then add the following code into <code>main.js</code> to load a sound file from the network and decode it into an <a href="https://developer.mozilla.org/docs/Web/API/AudioBuffer" target="_blank" rel="noreferrer"><code>AudioBuffer</code></a>:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#88846F;">// main.js</span></span>
<span class="line highlighted"><span style="color:#88846F;">// define a function that load a file from the network and decode</span></span>
<span class="line highlighted"><span style="color:#88846F;">// it into an \`AudioBuffer\` instance</span></span>
<span class="line highlighted"><span style="color:#F92672;">async</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">loadAudioBuffer</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">pathToFile</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> response </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">fetch</span><span style="color:#F8F8F2;">(pathToFile);</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> buffer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> response.</span><span style="color:#A6E22E;">arrayBuffer</span><span style="color:#F8F8F2;">();</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> audioBuffer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> audioContext.</span><span style="color:#A6E22E;">decodeAudioData</span><span style="color:#F8F8F2;">(buffer);</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> audioBuffer;</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">async</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">resumeContext</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> audioContext.</span><span style="color:#A6E22E;">resume</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;audioContext.state:&#39;</span><span style="color:#F8F8F2;">, audioContext.state);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre></div><p>Then let&#39;s just execute the function with the path of our file as argument:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#F92672;">async</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">loadAudioBuffer</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">pathToFile</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> response </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">fetch</span><span style="color:#F8F8F2;">(pathToFile);</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> buffer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> response.</span><span style="color:#A6E22E;">arrayBuffer</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> audioBuffer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> audioContext.</span><span style="color:#A6E22E;">decodeAudioData</span><span style="color:#F8F8F2;">(buffer);</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> audioBuffer;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">// load the file inside our project directory</span></span>
<span class="line highlighted"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> buffer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">loadAudioBuffer</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;./sample.wav&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(buffer);</span></span></code></pre></div><p>If you reload the page, you should all the informations about the file you loaded logged in the console:</p><p><img src="`+c+`" alt="audio-buffer"></p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Note the the buffer is properly loaded even if the <code>AudioContext</code> has not been resumed yet. This is an pretty handy feature as it allow us to load our audio file(s) when the page is loading, so everything is ready when the user starts to interact with the page.</p></div><h3 id="playback-the-buffer" tabindex="-1">Playback the buffer <a class="header-anchor" href="#playback-the-buffer" aria-label="Permalink to &quot;Playback the buffer&quot;">​</a></h3><p>Now that we have our <code>AudioBuffer</code> ready, let&#39;s had a button to trigger its playback into the HTML file:</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">&lt;!-- index.html --&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">button</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">id</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;trigger-osc&quot;</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">Trigger Oscillator</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#F92672;">button</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">button</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">id</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;trigger-sound-file&quot;</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">Trigger Sound File</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#F92672;">button</span><span style="color:#F8F8F2;">&gt;</span></span></code></pre></div><p>Just as before with the other buttons, let&#39;s grab the JavaScript representation of this new button:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// main.js</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> triggerOscButton </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> document.</span><span style="color:#A6E22E;">querySelector</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;#trigger-osc&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> triggerSoundFileButton </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> document.</span><span style="color:#A6E22E;">querySelector</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;#trigger-sound-file&#39;</span><span style="color:#F8F8F2;">);</span></span></code></pre></div><p>And Finally, we can write the code that will play the sound file when the user click on the button:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// main.js</span></span>
<span class="line"><span style="color:#88846F;">// function that playback the audio buffer we previously loaded</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">triggerSoundFile</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// create an audio buffer source node</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> src </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> audioContext.</span><span style="color:#A6E22E;">createBufferSource</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// set it&#39;s buffer with the audio buffer we loaded earlier</span></span>
<span class="line"><span style="color:#F8F8F2;">  src.buffer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> buffer;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// connect the node to the destination</span></span>
<span class="line"><span style="color:#F8F8F2;">  src.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(audioContext.destination);</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// start plyaback</span></span>
<span class="line"><span style="color:#F8F8F2;">  src.</span><span style="color:#A6E22E;">start</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">// playback our audio buffer each time the button is clicked</span></span>
<span class="line"><span style="color:#F8F8F2;">triggerSoundFileButton.</span><span style="color:#A6E22E;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;click&#39;</span><span style="color:#F8F8F2;">, triggerSoundFile);</span></span></code></pre></div><p>Tada! You now have a very powerful button that plays back your sound file each time you click on it.</p><h2 id="important-notes" tabindex="-1">Important notes <a class="header-anchor" href="#important-notes" aria-label="Permalink to &quot;Important notes&quot;">​</a></h2><h3 id="function-and-listeners-syntax" tabindex="-1">Function and listeners syntax <a class="header-anchor" href="#function-and-listeners-syntax" aria-label="Permalink to &quot;Function and listeners syntax&quot;">​</a></h3><p>In all this tutorial, we have used the following syntax to register listener for our buttons:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">onClick</span><span style="color:#F8F8F2;">() { console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;clicked&#39;</span><span style="color:#F8F8F2;">); }</span></span>
<span class="line"><span style="color:#F8F8F2;">myButton.</span><span style="color:#A6E22E;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;click&#39;</span><span style="color:#F8F8F2;">, onClick);</span></span></code></pre></div><p>It is important to understand that, in the second line, we actually pass the reference of the function as an argument of the <code>addEventListener</code> method. The function <strong>is not executed</strong> it at this point! This is the browser that will execute the function when the user actually clicks on the button.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Such functions are generally called <em>callbacks</em> because we give them to the browser (or to another piece of code), which is in charge of executing it (or calling it back) when &quot;something&quot; happen at some unknown point in the future.</p></div><p>Another way of writing this, would have been therefore to declare the function at the same time we pass it as an argument:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">myButton.</span><span style="color:#A6E22E;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;click&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">onClick</span><span style="color:#F8F8F2;">() { console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;clicked&#39;</span><span style="color:#F8F8F2;">); });</span></span></code></pre></div><p>But, now our line of code starts to be a bit long and hard to read, so can just insert line breaks to make it a bit more pretty:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">myButton.</span><span style="color:#A6E22E;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;click&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">onClick</span><span style="color:#F8F8F2;">() { </span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;clicked&#39;</span><span style="color:#F8F8F2;">); </span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span></code></pre></div><p>But, at this point, we can then wonder why need to give a name to this function, as we are only interested to pass as argument of <code>addEventListener</code>. Indeed, we will never have to call this function manually, as it is the responsibility of the browser. So, we can just remove the function name and pass an <em>anonymous function</em>:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">myButton.</span><span style="color:#A6E22E;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;click&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">() { </span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;clicked&#39;</span><span style="color:#F8F8F2;">); </span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span></code></pre></div><p>Finally, yet another way of writing this would be to use the <em>arrow function</em> syntax:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">myButton.</span><span style="color:#A6E22E;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;click&#39;</span><span style="color:#F8F8F2;">, () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> { </span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;clicked&#39;</span><span style="color:#F8F8F2;">); </span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span></code></pre></div><p>In the reset of these tutorials, we will mostly use the two last syntax which are the most common in JavaScript. So make sure you&#39;ve understood this note and why these different syntaxes are (almost) all the same.</p><h3 id="audio-sources-behaviour" tabindex="-1">Audio sources behaviour <a class="header-anchor" href="#audio-sources-behaviour" aria-label="Permalink to &quot;Audio sources behaviour&quot;">​</a></h3><p>An important you may have noticed, is that created a new instance of <code>OscillatorNode</code> and <code>AudioBufferSourceNode</code> each time you clicked on the button. This is something that is often a bit confusing at first for people which are used to other music programming environment. Indeed, in the Web Audio API paradigm, sources are <strong>not reusable</strong>, once they have been stopped (or stopped themselves in the case of the <code>AudioBufferSourceNode</code>), they cannot be restarted again.</p><p>In future tuturials, we will see how this feature (that may appear weird) can end up to be very practicle and powerful.</p><h2 id="conclusion" tabindex="-1">Conclusion <a class="header-anchor" href="#conclusion" aria-label="Permalink to &quot;Conclusion&quot;">​</a></h2><p>In this tutorial, you have learned how to use some basic building blocks of the Web Audio API.</p><p>Along the way you have learned many different things such as how to resume the audio context with a user interaction, how to load and decode a sound file from the network, how to create automations on audio parameters, and well as important concepts regarding the audio sources in the Web Audio API.</p><p>In the next tutorial, we will go a bit further with the creation of an AM synthesizer.</p>`,107),i=[F];function y(d,u,h,g,f,m){return n(),a("div",null,i)}const A=s(r,[["render",y]]);export{b as __pageData,A as default};
