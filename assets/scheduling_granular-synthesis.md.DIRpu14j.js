import{c as a,m as s,a as l,p as e,a3 as n,o,g as p}from"./chunks/framework.Wgqp_vq1.js";const t="/webaudio-tutorials/assets/granular-synthesis.BUTSAAVC.png",r="/webaudio-tutorials/assets/scheduler-working.B490JIm5.png",c=n('<h1 id="granular-synthesis" tabindex="-1">Granular Synthesis <a class="header-anchor" href="#granular-synthesis" aria-label="Permalink to &quot;Granular Synthesis&quot;">​</a></h1><p>In this tutorial, you will learn how to implement a granular synthesizer using the Web Audio API leveraging on the lookahead scheduling technique we have seen in the previous tutorial.</p><h3 id="related-documentation" tabindex="-1">Related Documentation <a class="header-anchor" href="#related-documentation" aria-label="Permalink to &quot;Related Documentation&quot;">​</a></h3><ul><li><a href="https://en.wikipedia.org/wiki/Granular_synthesis" target="_blank" rel="noreferrer">Granular Synthesis - Wikipedia</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/start" target="_blank" rel="noreferrer"><code>AudioBufferSourceNode.start</code></a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/playbackRate" target="_blank" rel="noreferrer"><code>AudioBufferSourceNode.playbackRate</code></a></li></ul><h2 id="general-principles" tabindex="-1">General principles <a class="header-anchor" href="#general-principles" aria-label="Permalink to &quot;General principles&quot;">​</a></h2><p>Granular synthesis is a sound synthesis technique that consists in cutting a audio files in small pieces of sound of around 5 to 200 ms called <strong><em>grains</em></strong>. These grains are then played back and layered to reconstruct a new sound. Each grain can also be manipulated independently by modifying for example their pitch, volume, etc.</p><p><img src="'+t+`" alt="granular-synthesis"></p><h2 id="implement-the-synthesis-engine" tabindex="-1">Implement the synthesis engine <a class="header-anchor" href="#implement-the-synthesis-engine" aria-label="Permalink to &quot;Implement the synthesis engine&quot;">​</a></h2><h3 id="scaffold-the-project" tabindex="-1">Scaffold the project <a class="header-anchor" href="#scaffold-the-project" aria-label="Permalink to &quot;Scaffold the project&quot;">​</a></h3><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;">cd</span><span style="color:#E6DB74;"> ~/Desktop/webaudio-tutorials</span></span>
<span class="line"><span style="color:#A6E22E;">npx</span><span style="color:#E6DB74;"> @ircam/create@latest</span><span style="color:#AE81FF;"> 06</span><span style="color:#E6DB74;">-granular-synthesis</span><span style="color:#AE81FF;">  --template=nobuild</span></span>
<span class="line"><span style="color:#66D9EF;">cd</span><span style="color:#AE81FF;"> 06</span><span style="color:#E6DB74;">-granular-synthesis</span></span>
<span class="line"><span style="color:#A6E22E;">npx</span><span style="color:#E6DB74;"> serve</span></span></code></pre></div><h3 id="import-a-library-for-scheduling" tabindex="-1">Import a library for scheduling <a class="header-anchor" href="#import-a-library-for-scheduling" aria-label="Permalink to &quot;Import a library for scheduling&quot;">​</a></h3><p>First, let&#39;s just import a library that will provide us with a much more robust version of the scheduler we implemented in last tutorial, while being build on the same principles:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#88846F;">// ./main.js</span></span>
<span class="line highlighted"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { html, render } </span><span style="color:#F92672;">from</span><span style="color:#E6DB74;"> &#39;https://unpkg.com/lit-html&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { Scheduler } </span><span style="color:#F92672;">from</span><span style="color:#E6DB74;"> &#39;https://unpkg.com/@ircam/sc-scheduling@0.1.6&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#E6DB74;"> &#39;https://unpkg.com/@ircam/sc-components@latest&#39;</span><span style="color:#F8F8F2;">;</span></span></code></pre></div><p>Replace the default sample in <code>./assets/sample.wav</code> with another longer one, and eventually modify the <code>loadAudioBuffer</code> first argument to match you file name:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-diff vp-code"><code><span class="line"><span style="color:#88846F;">// ./main.js</span></span>
<span class="line diff remove"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> buffer </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> await</span><span style="color:#A6E22E;"> loadAudioBuffer</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;./assets/sample.wav&#39;</span><span style="color:#F8F8F2;">, audioContext.sampleRate); </span></span>
<span class="line diff add"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> buffer </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> await</span><span style="color:#A6E22E;"> loadAudioBuffer</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;./assets/hendrix.wav&#39;</span><span style="color:#F8F8F2;">, audioContext.sampleRate); </span></span></code></pre></div>`,15),i={class:"info custom-block"},F=s("p",{class:"custom-block-title"},"INFO",-1),y=["href"],d=n(`<h3 id="implement-the-audio-engine" tabindex="-1">Implement the audio engine <a class="header-anchor" href="#implement-the-audio-engine" aria-label="Permalink to &quot;Implement the audio engine&quot;">​</a></h3><p>Let&#39;s start with defining the new class which will be our granular engine:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> buffer </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> await</span><span style="color:#A6E22E;"> loadAudioBuffer</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;./assets/sample.wav&#39;</span><span style="color:#F8F8F2;">, audioContext.sampleRate);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">GranularSynth</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">  constructor</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">audioContext</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">buffer</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FD971F;">    this</span><span style="color:#F8F8F2;">.audioContext </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> audioContext;</span></span>
<span class="line"><span style="color:#FD971F;">    this</span><span style="color:#F8F8F2;">.buffer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> buffer;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    // time interval between each grain</span></span>
<span class="line"><span style="color:#FD971F;">    this</span><span style="color:#F8F8F2;">.period </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0.025</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#88846F;">    // duration of each grain</span></span>
<span class="line"><span style="color:#FD971F;">    this</span><span style="color:#F8F8F2;">.duration </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0.1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#88846F;">    // position of the grain in the buffer</span></span>
<span class="line"><span style="color:#FD971F;">    this</span><span style="color:#F8F8F2;">.position </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    // create an output gain on wich will connect all our grains</span></span>
<span class="line"><span style="color:#FD971F;">    this</span><span style="color:#F8F8F2;">.output </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> this</span><span style="color:#F8F8F2;">.audioContext.</span><span style="color:#A6E22E;">createGain</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#88846F;">    // bind the render method so that we don&#39;t the instance context</span></span>
<span class="line"><span style="color:#FD971F;">    this</span><span style="color:#F8F8F2;">.render </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> this</span><span style="color:#F8F8F2;">.render.</span><span style="color:#A6E22E;">bind</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E;">  render</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">currentTime</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(currentTime);</span></span>
<span class="line"><span style="color:#88846F;">    // ask to be called at time of next grain</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> currentTime </span><span style="color:#F92672;">+</span><span style="color:#FD971F;"> this</span><span style="color:#F8F8F2;">.period;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre></div><p>For now, this doesn&#39;t make any sound, but let&#39;s see how to make it work with the scheduler:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#88846F;">// ./main.js</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">GranularSynth</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#88846F;">    // ...</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// create a new scheduler, in the audioContext timeline</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> scheduler </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span style="color:#A6E22E;"> Scheduler</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> audioContext.currentTime);</span></span>
<span class="line"><span style="color:#88846F;">// create out granular synth and connect it to audio destination</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> granular </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span style="color:#A6E22E;"> GranularSynth</span><span style="color:#F8F8F2;">(audioContext, buffer);</span></span>
<span class="line"><span style="color:#F8F8F2;">granular.output.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(audioContext.destination);</span></span>
<span class="line"><span style="color:#88846F;">// register the synth into the scheduler and start it now</span></span>
<span class="line"><span style="color:#F8F8F2;">scheduler.</span><span style="color:#A6E22E;">add</span><span style="color:#F8F8F2;">(granular.render, audioContext.currentTime);</span></span></code></pre></div><p>If you reload the page and open the console, you should see the start time of the grains logged into the console:</p><p><img src="`+r+`" alt="scheduler-working"></p><p>Let&#39;s then continue with implementing our render method:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#88846F;">// ./main.js</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">GranularSynth</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">  constructor</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">audioContext</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">buffer</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#88846F;">    // ...</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E;">  render</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">currentTime</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#88846F;">    // create our evenvelop gain</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    const</span><span style="color:#F8F8F2;"> env </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> this</span><span style="color:#F8F8F2;">.audioContext.</span><span style="color:#A6E22E;">createGain</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#88846F;">    // connect it to output</span></span>
<span class="line"><span style="color:#F8F8F2;">    env.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.output);</span></span>
<span class="line"><span style="color:#88846F;">    // schedule the fadein and fadeout</span></span>
<span class="line"><span style="color:#F8F8F2;">    env.gain.value </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    env.gain.</span><span style="color:#A6E22E;">setValueAtTime</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, currentTime);</span></span>
<span class="line"><span style="color:#F8F8F2;">    env.gain.</span><span style="color:#A6E22E;">linearRampToValueAtTime</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, currentTime </span><span style="color:#F92672;">+</span><span style="color:#FD971F;"> this</span><span style="color:#F8F8F2;">.duration </span><span style="color:#F92672;">/</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    env.gain.</span><span style="color:#A6E22E;">linearRampToValueAtTime</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, currentTime </span><span style="color:#F92672;">+</span><span style="color:#FD971F;"> this</span><span style="color:#F8F8F2;">.duration);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    // create the source that will play our grain</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    const</span><span style="color:#F8F8F2;"> src </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> this</span><span style="color:#F8F8F2;">.audioContext.</span><span style="color:#A6E22E;">createBufferSource</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">    src.buffer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> buffer;</span></span>
<span class="line"><span style="color:#88846F;">    // connect to output</span></span>
<span class="line"><span style="color:#F8F8F2;">    src.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(env);</span></span>
<span class="line"><span style="color:#88846F;">    // play the grain at given position and for given duration</span></span>
<span class="line"><span style="color:#F8F8F2;">    src.</span><span style="color:#A6E22E;">start</span><span style="color:#F8F8F2;">(currentTime, </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.position);</span></span>
<span class="line"><span style="color:#F8F8F2;">    src.</span><span style="color:#A6E22E;">stop</span><span style="color:#F8F8F2;">(currentTime </span><span style="color:#F92672;">+</span><span style="color:#FD971F;"> this</span><span style="color:#F8F8F2;">.duration);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    // increment position so that we read the file at speed divided by 4</span></span>
<span class="line"><span style="color:#FD971F;">    this</span><span style="color:#F8F8F2;">.position </span><span style="color:#F92672;">+=</span><span style="color:#FD971F;"> this</span><span style="color:#F8F8F2;">.period </span><span style="color:#F92672;">/</span><span style="color:#AE81FF;"> 4</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#88846F;">    // make sure we don&#39;t try to pick a grain outside the buffer</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.position </span><span style="color:#F92672;">&gt;</span><span style="color:#FD971F;"> this</span><span style="color:#F8F8F2;">.buffer.duration </span><span style="color:#F92672;">-</span><span style="color:#FD971F;"> this</span><span style="color:#F8F8F2;">.duration) {</span></span>
<span class="line"><span style="color:#FD971F;">      this</span><span style="color:#F8F8F2;">.position </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    // ask to be called at time of next grain</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> currentTime </span><span style="color:#F92672;">+</span><span style="color:#FD971F;"> this</span><span style="color:#F8F8F2;">.period;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre></div><p>The code is finally quite simple as we just create an audio buffer source node, pipe it into gain with a simple envelop automation, which is itself connected to the output node of the synth. At the end of the render method, we just update the position of the next grain so that the source file is played back at a portion of its normal speed.</p><p>When you reload the page you should now hear your GranularSynth in action!</p><h2 id="adding-controls" tabindex="-1">Adding controls <a class="header-anchor" href="#adding-controls" aria-label="Permalink to &quot;Adding controls&quot;">​</a></h2><p>Let&#39;s now finalize our application to add control interfaces to change the parameters of the synthesis in real-time.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#88846F;">// ./main.js</span></span>
<span class="line"><span style="color:#A6E22E;">render</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">html</span><span style="color:#E6DB74;">\`</span></span>
<span class="line"><span style="color:#E6DB74;">  &lt;h1&gt;06-granular-synthesis&lt;/h1&gt;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">  &lt;div&gt;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">    &lt;sc-text&gt;Period&lt;/sc-text&gt;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">    &lt;sc-slider</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">      min=&quot;0.005&quot;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">      max=&quot;0.1&quot;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">      value=</span><span style="color:#F92672;">\${</span><span style="color:#F8F8F2;">granular.period</span><span style="color:#F92672;">}</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">      @input=</span><span style="color:#F92672;">\${</span><span style="color:#FD971F;font-style:italic;">e</span><span style="color:#66D9EF;font-style:italic;"> =&gt;</span><span style="color:#F8F8F2;"> granular.period </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> e.detail.value</span><span style="color:#F92672;">}</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">      number-box</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">    &gt;&lt;/sc-slider&gt;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">  &lt;/div&gt;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">  &lt;div&gt;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">    &lt;sc-text&gt;Duration&lt;/sc-text&gt;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">    &lt;sc-slider</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">      min=&quot;0.01&quot;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">      max=&quot;0.5&quot;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">      value=</span><span style="color:#F92672;">\${</span><span style="color:#F8F8F2;">granular.duration</span><span style="color:#F92672;">}</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">      @input=</span><span style="color:#F92672;">\${</span><span style="color:#FD971F;font-style:italic;">e</span><span style="color:#66D9EF;font-style:italic;"> =&gt;</span><span style="color:#F8F8F2;"> granular.duration </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> e.detail.value</span><span style="color:#F92672;">}</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">      number-box</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">    &gt;&lt;/sc-slider&gt;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">  &lt;/div&gt;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">  &lt;div&gt;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">    &lt;sc-text&gt;Position&lt;/sc-text&gt;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">    &lt;sc-slider</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">      min=&quot;0&quot;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">      max=</span><span style="color:#F92672;">\${</span><span style="color:#F8F8F2;">buffer.duration</span><span style="color:#F92672;">}</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">      value=</span><span style="color:#F92672;">\${</span><span style="color:#F8F8F2;">granular.position</span><span style="color:#F92672;">}</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">      @input=</span><span style="color:#F92672;">\${</span><span style="color:#FD971F;font-style:italic;">e</span><span style="color:#66D9EF;font-style:italic;"> =&gt;</span><span style="color:#F8F8F2;"> granular.position </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> e.detail.value</span><span style="color:#F92672;">}</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">      number-box</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">    &gt;&lt;/sc-slider&gt;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">  &lt;/div&gt;</span></span>
<span class="line"><span style="color:#E6DB74;">\`</span><span style="color:#F8F8F2;">, document.body);</span></span></code></pre></div><p>And change our synth so that the position is not updated automatically but only controlled by the slider:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-diff vp-code"><code><span class="line"><span style="color:#88846F;">// ./main.js</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">GranularSynth</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">  constructor</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">audioContext</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">buffer</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#88846F;">    // ...</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E;">  render</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">currentTime</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#88846F;">    // ...</span></span>
<span class="line"></span>
<span class="line diff remove"><span style="color:#88846F;">    // increment position so that we read the file at speed divided by 4</span></span>
<span class="line diff remove"><span style="color:#FD971F;">    this</span><span style="color:#F8F8F2;">.position </span><span style="color:#F92672;">+=</span><span style="color:#FD971F;"> this</span><span style="color:#F8F8F2;">.period </span><span style="color:#F92672;">/</span><span style="color:#AE81FF;"> 4</span><span style="color:#F8F8F2;">; </span></span>
<span class="line diff remove"><span style="color:#88846F;">    // make sure we don&#39;t try to pick a grain outside the buffer</span></span>
<span class="line diff remove"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.position </span><span style="color:#F92672;">&gt;</span><span style="color:#FD971F;"> this</span><span style="color:#F8F8F2;">.buffer.duration </span><span style="color:#F92672;">-</span><span style="color:#FD971F;"> this</span><span style="color:#F8F8F2;">.duration) { </span></span>
<span class="line diff remove"><span style="color:#FD971F;">      this</span><span style="color:#F8F8F2;">.position </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">; </span></span>
<span class="line diff remove"><span style="color:#F8F8F2;">    } </span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    // ask to be called at time of next grain</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> currentTime </span><span style="color:#F92672;">+</span><span style="color:#FD971F;"> this</span><span style="color:#F8F8F2;">.period;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre></div><p>If you play a bit with the controls, you can ear that with very low <code>period</code> values, the resulting synthesis produces pitched audible artifacts, which might not be desirable. This is due to the fact these values are so small that they start to be audible on their own, e.g. a period of 0.005 ms corresponds to 200 Hz.</p><p>A way to remove these artifacts is to add some jitter, or noise on the scheduling of the grain:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-diff vp-code"><code><span class="line"><span style="color:#88846F;">// ./main.js</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">GranularSynth</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">  constructor</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">audioContext</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">buffer</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#88846F;">    // ...</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E;">  render</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">currentTime</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line diff add"><span style="color:#66D9EF;font-style:italic;">    const</span><span style="color:#F8F8F2;"> jitter </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Math.</span><span style="color:#A6E22E;">random</span><span style="color:#F8F8F2;">() </span><span style="color:#F92672;">*</span><span style="color:#AE81FF;"> 0.002</span><span style="color:#F8F8F2;">; </span></span>
<span class="line diff add"><span style="color:#66D9EF;font-style:italic;">    const</span><span style="color:#F8F8F2;"> grainTime </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> currentTime </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> jitter; </span></span>
<span class="line"><span style="color:#88846F;">    // create our evenvelop gain</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    const</span><span style="color:#F8F8F2;"> env </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> this</span><span style="color:#F8F8F2;">.audioContext.</span><span style="color:#A6E22E;">createGain</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#88846F;">    // connect it to output</span></span>
<span class="line"><span style="color:#F8F8F2;">    env.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.output);</span></span>
<span class="line"><span style="color:#88846F;">    // schedule the fadein and fadeout</span></span>
<span class="line"><span style="color:#F8F8F2;">    env.gain.value </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line diff remove"><span style="color:#F8F8F2;">    env.gain.</span><span style="color:#A6E22E;">setValueAtTime</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, currentTime); </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">    env.gain.</span><span style="color:#A6E22E;">setValueAtTime</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, grainTime); </span></span>
<span class="line diff remove"><span style="color:#F8F8F2;">    env.gain.</span><span style="color:#A6E22E;">linearRampToValueAtTime</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, currentTime </span><span style="color:#F92672;">+</span><span style="color:#FD971F;"> this</span><span style="color:#F8F8F2;">.duration </span><span style="color:#F92672;">/</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;">); </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">    env.gain.</span><span style="color:#A6E22E;">linearRampToValueAtTime</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, grainTime </span><span style="color:#F92672;">+</span><span style="color:#FD971F;"> this</span><span style="color:#F8F8F2;">.duration </span><span style="color:#F92672;">/</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;">); </span></span>
<span class="line diff remove"><span style="color:#F8F8F2;">    env.gain.</span><span style="color:#A6E22E;">linearRampToValueAtTime</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, currentTime </span><span style="color:#F92672;">+</span><span style="color:#FD971F;"> this</span><span style="color:#F8F8F2;">.duration); </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">    env.gain.</span><span style="color:#A6E22E;">linearRampToValueAtTime</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, grainTime </span><span style="color:#F92672;">+</span><span style="color:#FD971F;"> this</span><span style="color:#F8F8F2;">.duration); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    // create the source that will play our grain</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    const</span><span style="color:#F8F8F2;"> src </span><span style="color:#F92672;">=</span><span style="color:#FD971F;"> this</span><span style="color:#F8F8F2;">.audioContext.</span><span style="color:#A6E22E;">createBufferSource</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">    src.buffer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> buffer;</span></span>
<span class="line"><span style="color:#88846F;">    // connect to output</span></span>
<span class="line"><span style="color:#F8F8F2;">    src.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(env);</span></span>
<span class="line"><span style="color:#88846F;">    // play the grain at given position and for given duration</span></span>
<span class="line diff remove"><span style="color:#F8F8F2;">    src.</span><span style="color:#A6E22E;">start</span><span style="color:#F8F8F2;">(currentTime, </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.position); </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">    src.</span><span style="color:#A6E22E;">start</span><span style="color:#F8F8F2;">(grainTime, </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.position); </span></span>
<span class="line diff remove"><span style="color:#F8F8F2;">    src.</span><span style="color:#A6E22E;">stop</span><span style="color:#F8F8F2;">(currentTime </span><span style="color:#F92672;">+</span><span style="color:#FD971F;"> this</span><span style="color:#F8F8F2;">.duration); </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">    src.</span><span style="color:#A6E22E;">stop</span><span style="color:#F8F8F2;">(grainTime </span><span style="color:#F92672;">+</span><span style="color:#FD971F;"> this</span><span style="color:#F8F8F2;">.duration); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    // ask to be called at time of next grain</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> currentTime </span><span style="color:#F92672;">+</span><span style="color:#FD971F;"> this</span><span style="color:#F8F8F2;">.period;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre></div><p>Congrats! Your granular synthesizer is now fully working</p><h2 id="going-further" tabindex="-1">Going further <a class="header-anchor" href="#going-further" aria-label="Permalink to &quot;Going further&quot;">​</a></h2><p>To improve the application, you could for example add some controls over:</p><ul><li>The pitch of each grain, using the <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/playbackRate" target="_blank" rel="noreferrer"><code>AudioBufferSourceNode.playbackRate</code></a> rate param</li><li>Allow users to use their own audio file, by providing a way to drag and drop it directly into the interface, cf. <a href="https://ircam-ismm.github.io/sc-components/sc-dragndrop" target="_blank" rel="noreferrer"><code>&lt;sc-dragndrop&gt;</code></a></li></ul><h2 id="conclusion" tabindex="-1">Conclusion <a class="header-anchor" href="#conclusion" aria-label="Permalink to &quot;Conclusion&quot;">​</a></h2><p>In this tutorial, you have learned how to leverage on the scheduling technique we have seen in the previous tutorial to build your own granular synthesizer.</p><p>In the next tutorial, we will continue with the exploration of the scheduling by implementing a simple step sequencer.</p>`,26),E=JSON.parse('{"title":"Granular Synthesis","description":"","frontmatter":{},"headers":[],"relativePath":"scheduling/granular-synthesis.md","filePath":"scheduling/granular-synthesis.md"}'),h={name:"scheduling/granular-synthesis.md"},D=Object.assign(h,{setup(u){return(g,f)=>(o(),a("div",null,[c,s("div",i,[F,s("p",null,[l("The sample used in the tutorial can be downloaded "),s("a",{href:e(p)("/static-assets/granular-synthesis-samples.zip")},"here",8,y)])]),d]))}});export{E as __pageData,D as default};
