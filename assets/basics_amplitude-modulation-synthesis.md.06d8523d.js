import{o as n,c as o,k as s,l as e,Q as a,f as l}from"./chunks/framework.9f45b8e0.js";const t="/webaudio-tutorials/assets/scaffolding-project.236aad48.png",p="/webaudio-tutorials/assets/serve.fa6c918e.png",c="/webaudio-tutorials/assets/scaffold-screenshot-1.53ab6847.png",r="/webaudio-tutorials/assets/scaffold-screenshot-2.8d17727e.png",i="/webaudio-tutorials/assets/modulating-amp.4c78c29b.png",F="/webaudio-tutorials/assets/lit-tittle.3acd8a18.png",y="/webaudio-tutorials/assets/gui-carrier.287c597a.png",d="/webaudio-tutorials/assets/gui-modulator.04b89b91.png",h=a('<h1 id="amplitude-modulation-synthesis" tabindex="-1">Amplitude Modulation Synthesis <a class="header-anchor" href="#amplitude-modulation-synthesis" aria-label="Permalink to &quot;Amplitude Modulation Synthesis&quot;">​</a></h1><p>In this tutorial, we will explore another very common synthesis technique: the Amplitude Modulation (AM) synthesis.</p><h3 id="related-documentation" tabindex="-1">Related Documentation <a class="header-anchor" href="#related-documentation" aria-label="Permalink to &quot;Related Documentation&quot;">​</a></h3><ul><li><a href="https://github.com/ircam-ismm/ircam-create" target="_blank" rel="noreferrer">@ircam/create</a></li><li><a href="https://developer.mozilla.org/docs/Web/API/OscillatorNode" target="_blank" rel="noreferrer"><code>OscillatorNode</code></a></li><li><a href="https://developer.mozilla.org/docs/Web/API/GainNode" target="_blank" rel="noreferrer"><code>GainNode</code></a></li><li><a href="https://developer.mozilla.org/docs/Web/API/AudioParam" target="_blank" rel="noreferrer"><code>AudioParam</code></a></li><li><a href="https://lit.dev/" target="_blank" rel="noreferrer">lit</a></li><li><a href="https://ircam-ismm.github.io/sc-components/" target="_blank" rel="noreferrer">@ircam/sc-components</a></li></ul><h2 id="scaffold-the-project-automatically" tabindex="-1">Scaffold the project automatically <a class="header-anchor" href="#scaffold-the-project-automatically" aria-label="Permalink to &quot;Scaffold the project automatically&quot;">​</a></h2><p>First, let&#39;s start with scaffolding our project once again. This time, instead of manually create all files and linking them together, we will just use a simple tool that will do all the boring stuff for us.</p><p>Open a <code>Terminal</code> and go into your projects directory:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;">cd</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">Desktop/webaudio-tutorials</span></span></code></pre></div><p>Then run the following command to scaffold the project:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">npx</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">@ircam/create@latest</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">03</span><span style="color:#E6DB74;">-amplitude-modulation</span></span></code></pre></div><p>The <code>npx</code> will tell you that you need to install something, just press &quot;Enter&quot; to continue:</p><p><img src="'+t+`" alt="scaffolding-project"></p><p>If you open the directory that have been created by the tool in your text editor, you should see the following structure and files:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">03-amplitude-modules</span></span>
<span class="line"><span style="color:#A6E22E;">├──</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">assets</span><span style="color:#F8F8F2;">              </span><span style="color:#88846F;"># Directory to store assets of your project (e.g. sound files)</span></span>
<span class="line"><span style="color:#A6E22E;">│</span><span style="color:#F8F8F2;">   </span><span style="color:#E6DB74;">└──</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">sample.wev</span><span style="color:#F8F8F2;">      </span><span style="color:#88846F;"># a test sound file  </span></span>
<span class="line"><span style="color:#A6E22E;">├──</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">lib</span><span style="color:#F8F8F2;">                 </span><span style="color:#88846F;"># Directory where to store some common helpers</span></span>
<span class="line"><span style="color:#A6E22E;">│</span><span style="color:#F8F8F2;">   </span><span style="color:#E6DB74;">├──</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">load-audio-buffer.js</span><span style="color:#F8F8F2;">  </span></span>
<span class="line"><span style="color:#A6E22E;">│</span><span style="color:#F8F8F2;">   </span><span style="color:#E6DB74;">└──</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">resume-audio-context.js</span></span>
<span class="line"><span style="color:#A6E22E;">├──</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">index.html</span><span style="color:#F8F8F2;">          </span><span style="color:#88846F;"># The index file</span></span>
<span class="line"><span style="color:#A6E22E;">├──</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">main.js</span><span style="color:#F8F8F2;">             </span><span style="color:#88846F;"># Where you will put the javascript code</span></span>
<span class="line"><span style="color:#A6E22E;">├──</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">README.md</span><span style="color:#F8F8F2;">           </span><span style="color:#88846F;"># General infos about your application</span></span>
<span class="line"><span style="color:#A6E22E;">└──</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">styles.css</span><span style="color:#F8F8F2;">          </span><span style="color:#88846F;"># The CSS file</span></span></code></pre></div><p>The project is very close from what we have done manually so far, except that it already contains the code required to resume the audio context, to load sound files, as well as some default CSS to make it nicer to look.</p><p>Before digging a bit more into the code, let&#39;s just follow the &quot;next steps&quot; instructions given by the tool to make sure everything works as expected:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;">cd</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">03</span><span style="color:#E6DB74;">-amplitude-modulation</span></span>
<span class="line"><span style="color:#A6E22E;">npx</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">serve</span></span></code></pre></div><p><img src="`+p+'" alt="serve"></p><p>As you can see, the server has been launched into our project, just as before. If you then open <a href="http://localhost:3000" target="_blank" rel="noreferrer">http://localhost:3000</a>, you should see a init page with a big button to resume the context:</p><p><img src="'+c+'" alt="scaffold-screenshot-1"></p><p>And, after a click on the button:</p><p><img src="'+r+`" alt="scaffold-screenshot-2"></p><h2 id="using-import-and-libraries" tabindex="-1">Using <code>import</code> and libraries <a class="header-anchor" href="#using-import-and-libraries" aria-label="Permalink to &quot;Using \`import\` and libraries&quot;">​</a></h2><p>Let&#39;s open the <code>main.js</code> file to explore how the project is structured:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// main.js</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { html, render } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;https://unpkg.com/lit-html&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;https://unpkg.com/@ircam/sc-components@latest&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> resumeAudioContext </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;./lib/resume-audio-context.js&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> loadAudioBuffer </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;./lib/load-audio-buffer.js&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> audioContext </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">AudioContext</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">resumeAudioContext</span><span style="color:#F8F8F2;">(audioContext);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> buffer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">loadAudioBuffer</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;./assets/sample.wav&#39;</span><span style="color:#F8F8F2;">, audioContext.sampleRate);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E;">render</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">html</span><span style="color:#E6DB74;">\`</span></span>
<span class="line"><span style="color:#E6DB74;">  &lt;h1&gt;03-amplitude-modulation&lt;/h1&gt;</span></span>
<span class="line"><span style="color:#E6DB74;">  &lt;sc-bang</span></span>
<span class="line"><span style="color:#E6DB74;">    @input=</span><span style="color:#F92672;">\${</span><span style="color:#FD971F;font-style:italic;">e</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> src </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> audioContext.</span><span style="color:#A6E22E;">createBufferSource</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">      src.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(audioContext.destination);</span></span>
<span class="line"><span style="color:#F8F8F2;">      src.buffer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> buffer;</span></span>
<span class="line"><span style="color:#F8F8F2;">      src.</span><span style="color:#A6E22E;">start</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span><span style="color:#F92672;">}</span></span>
<span class="line"><span style="color:#E6DB74;">  &gt;&lt;/sc-bang&gt;</span></span>
<span class="line"><span style="color:#E6DB74;">\`</span><span style="color:#F8F8F2;">, document.body);</span></span></code></pre></div><p>As you can see, while some things may appear quite similar to what we have already done in previous tutorials, there are also a few new thing that we need to understand.</p><p>The most important are the first lines, which begins with <code>import</code>, let&#39;s just concentrate on one of the two last imports to understand what is going on there:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { html, render } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;https://unpkg.com/lit-html&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;https://unpkg.com/@ircam/sc-components@latest&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> resumeAudioContext </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;./lib/resume-audio-context.js&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line highlighted"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> loadAudioBuffer </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;./lib/load-audio-buffer.js&#39;</span><span style="color:#F8F8F2;">;</span></span></code></pre></div><p>If we detail this, we can understand that our code &quot;imports&quot; something called <code>loadAudioBuffer</code> from a relative location: <code>&#39;./lib/load-audio-buffer.js&#39;</code>. Interestingly, this location corresponds to the <code>load-audio-buffer.js</code> file located inside the <code>lib</code> directory. Let&#39;s just open this file to understand what our code actually imports:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// ./lib/load-audio-buffer.js</span></span>
<span class="line"><span style="color:#F92672;">export</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">default</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">async</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">loadAudioBuffer</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">pathname</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">sampleRate</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">48000</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// ...</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> response </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">fetch</span><span style="color:#F8F8F2;">(pathname);</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> arrayBuffer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> response.</span><span style="color:#A6E22E;">arrayBuffer</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// ...</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> audioBuffer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> context.</span><span style="color:#A6E22E;">decodeAudioData</span><span style="color:#F8F8F2;">(arrayBuffer);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> audioBuffer;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre></div><p>Except some particularities that have removed from the snippet above, you can see that this file &quot;exports&quot; a function called <code>loadAudioBuffer</code> which contains more or less the same code you wrote in the last tutorial to load an audio file from the network and to decode it to an <a href="https://developer.mozilla.org/docs/Web/API/AudioBuffer" target="_blank" rel="noreferrer"><code>AudioBuffer</code></a>.</p><p>These <code>import</code> and <code>export</code> statements are the tools JavaScript gives us to organize our projets. Moreover, they also allows us to load libraries directly from the Web, cf. the first two <code>import</code> and thus share functionnalities between several projects. For example, the two libraries that are imported in the first two lines will help us creating the user interfaces more simply.</p><h2 id="create-the-audio-graph" tabindex="-1">Create the audio graph <a class="header-anchor" href="#create-the-audio-graph" aria-label="Permalink to &quot;Create the audio graph&quot;">​</a></h2><p>Now that eveything is ready and that you have an understanding of the structure of the project, let&#39;s write our AM synthesis engine. The main principle of AM synthesis is to modulate the amplitude (i.e. the gain) of a signal, called the &quot;carrier&quot;, with another signal &quot;modulating&quot; signal</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>We won&#39;t go into the details of how amplitude modulation works here, so if you are not familiar with how AM synthesis works, you can find a number of resources online such as on <a href="https://en.wikipedia.org/wiki/Amplitude_modulation" target="_blank" rel="noreferrer">Wikipedia</a></p></div><p>As we will only use <a href="https://developer.mozilla.org/docs/Web/API/OscillatorNode" target="_blank" rel="noreferrer"><code>OscillatorNode</code></a> here, let&#39;s start with cleaning a bit our <code>main.js</code> file to remove the things we won&#39;t use:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-diff"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { html, render } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;https://unpkg.com/lit-html&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;https://unpkg.com/@ircam/sc-components@latest&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> resumeAudioContext </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;./lib/resume-audio-context.js&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line diff remove"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> loadAudioBuffer </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;./lib/load-audio-buffer.js&#39;</span><span style="color:#F8F8F2;">; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> audioContext </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">AudioContext</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">resumeAudioContext</span><span style="color:#F8F8F2;">(audioContext);</span></span>
<span class="line"></span>
<span class="line diff remove"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> buffer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">loadAudioBuffer</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;./assets/sample.wav&#39;</span><span style="color:#F8F8F2;">, audioContext.sampleRate);  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E;">render</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">html</span><span style="color:#E6DB74;">\`</span></span>
<span class="line"><span style="color:#E6DB74;">  &lt;h1&gt;03-amplitude-modulation&lt;/h1&gt;</span></span>
<span class="line diff remove"><span style="color:#E6DB74;">  &lt;sc-bang   </span></span>
<span class="line diff remove"><span style="color:#E6DB74;">    @input=</span><span style="color:#F92672;">\${</span><span style="color:#FD971F;font-style:italic;">e</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {  </span></span>
<span class="line diff remove"><span style="color:#F8F8F2;">      </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> src </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> audioContext.</span><span style="color:#A6E22E;">createBufferSource</span><span style="color:#F8F8F2;">();  </span></span>
<span class="line diff remove"><span style="color:#F8F8F2;">      src.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(audioContext.destination);  </span></span>
<span class="line diff remove"><span style="color:#F8F8F2;">      src.buffer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> buffer;  </span></span>
<span class="line diff remove"><span style="color:#F8F8F2;">      src.</span><span style="color:#A6E22E;">start</span><span style="color:#F8F8F2;">();  </span></span>
<span class="line diff remove"><span style="color:#F8F8F2;">    }</span><span style="color:#F92672;">}</span><span style="color:#E6DB74;">  </span></span>
<span class="line diff remove"><span style="color:#E6DB74;">  &gt;&lt;/sc-bang&gt; </span></span>
<span class="line"><span style="color:#E6DB74;">\`</span><span style="color:#F8F8F2;">, document.body);</span></span></code></pre></div><p>which leaves us with an even more simple structure:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { html, render } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;https://unpkg.com/lit-html&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;https://unpkg.com/@ircam/sc-components@latest&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> resumeAudioContext </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;./lib/resume-audio-context.js&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> audioContext </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">AudioContext</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">resumeAudioContext</span><span style="color:#F8F8F2;">(audioContext);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E;">render</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">html</span><span style="color:#E6DB74;">\`</span></span>
<span class="line"><span style="color:#E6DB74;">  &lt;h1&gt;03-amplitude-modulation&lt;/h1&gt;</span></span>
<span class="line"><span style="color:#E6DB74;">\`</span><span style="color:#F8F8F2;">, document.body);</span></span></code></pre></div><p>Then let&#39;s first define some constant for our synthsizer:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> audioContext </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">AudioContext</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">resumeAudioContext</span><span style="color:#F8F8F2;">(audioContext);</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> amDepth </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">; </span><span style="color:#88846F;">// how much the carrier is modulated: [0, 1]</span></span>
<span class="line highlighted"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> amFrequency </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">; </span><span style="color:#88846F;">// in Hz</span></span>
<span class="line highlighted"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> carrierFrequency </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">200</span><span style="color:#F8F8F2;">; </span><span style="color:#88846F;">// in Hz</span></span></code></pre></div><p>Then, let&#39;s define our &quot;carrier&quot; oscillator and the gain that will be modulated to create the modulating envelop:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> carrierFrequency </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">200</span><span style="color:#F8F8F2;">; </span><span style="color:#88846F;">// in Hz</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#88846F;">// carrier signal</span></span>
<span class="line highlighted"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> carrier </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> audioContext.</span><span style="color:#A6E22E;">createOscillator</span><span style="color:#F8F8F2;">();</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">carrier.frequency.value </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> carrierFrequency;</span></span>
<span class="line highlighted"><wbr></span>
<span class="line highlighted"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> envelop </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> audioContext.</span><span style="color:#A6E22E;">createGain</span><span style="color:#F8F8F2;">();</span></span>
<span class="line highlighted"><wbr></span>
<span class="line highlighted"><span style="color:#88846F;">// connect them all together</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">carrier.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(envelop)</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">envelop.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(audioContext.destination);</span></span>
<span class="line highlighted"><wbr></span>
<span class="line highlighted"><span style="color:#88846F;">// start the sources</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">carrier.</span><span style="color:#A6E22E;">start</span><span style="color:#F8F8F2;">();</span></span></code></pre></div><p>If you reload the page now, you should ear a simple sine oscillator at 200Hz.</p><p>Let&#39;s now implement the modulating branch of our synthesizer. What we want to obtain here is a amplitude signal which has the form of a sine wave at 2Hz (i.e. our <code>amFrequency</code> value), and comprised between 0 and 1 (i.e. <code>amDepth</code> value).</p><p><img src="`+i+`" alt="modulating-amp"></p><p>To achieve this using only <a href="https://developer.mozilla.org/docs/Web/API/OscillatorNode" target="_blank" rel="noreferrer"><code>OscillatorNode</code></a> (which produces a signal between <code>-1</code> and <code>1</code>) and a <a href="https://developer.mozilla.org/docs/Web/API/GainNode" target="_blank" rel="noreferrer"><code>GainNode</code></a> (which basically apply a multiplication on an incoming signal), we will need two steps:</p><ul><li>Apply a gain of 0.5 (i.e. <code>amDepth / 2</code>) on an oscillator, producing a sin comprised between <code>-0.5</code> and <code>0.5</code></li><li>Then add a constant value of <code>0.5</code> (i.e. <code>1 - amDepth / 2</code>) to this scaled signal</li></ul><p>In terms of code, the first step is quite straight forward, ti is basically creating an oscillator and piping it into a gain:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#F8F8F2;">envelop.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(audioContext.destination);</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#88846F;">// modullating branch</span></span>
<span class="line highlighted"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> modulator </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> audioContext.</span><span style="color:#A6E22E;">createOscillator</span><span style="color:#F8F8F2;">();</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">modulator.frequency.value </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> amFrequency;</span></span>
<span class="line highlighted"><wbr></span>
<span class="line highlighted"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> depth </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> audioContext.</span><span style="color:#A6E22E;">createGain</span><span style="color:#F8F8F2;">();</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">depth.gain.value </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> amDepth </span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">;</span></span>
<span class="line highlighted"><wbr></span>
<span class="line highlighted"><span style="color:#F8F8F2;">modulator.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(depth); </span><span style="color:#88846F;">// signal between [-0.5, 0.5]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// start the sources</span></span>
<span class="line"><span style="color:#F8F8F2;">carrier.</span><span style="color:#A6E22E;">start</span><span style="color:#F8F8F2;">();</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">modulator.</span><span style="color:#A6E22E;">start</span><span style="color:#F8F8F2;">();</span></span></code></pre></div><p>The second step, to add an offset to the scaled signal, requires us to use a interesting feature of <a href="https://developer.mozilla.org/docs/Web/API/AudioParam" target="_blank" rel="noreferrer"><code>AudioParam</code></a>s. Indeed, the Web Audo API allows us to directly modulate an <a href="https://developer.mozilla.org/docs/Web/API/AudioParam" target="_blank" rel="noreferrer"><code>AudioParam</code></a>, for example the <code>gain</code> of our <code>envelop</code> node, with another signal. When connecting a node to a audio param, the signal of the node is &quot;added&quot; to the signal intrisically produced by the audio param.</p><p>In other words, if we set the <code>gain</code> of our <code>envelop</code> to 0.5, the gain <code>AudioParam</code> produces a constant signal at <code>0.5</code>, which is used to multiply the input signal of the <code>GainNode</code>. But if we modulate our gain <code>AudioParam</code>, and therefore its constant signal a <code>0.5</code> with the scaled signal we just created with the <code>modulator</code> and <code>depth</code> node. The constant signal of the gain <code>AudioParam</code> and our scaled signal will just be added together, producing a sine wave comprised between <code>0</code> and <code>1</code>.</p><p>In the code, this just means:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-diff"><code><span class="line"><span style="color:#88846F;">// carrier signal</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> carrier </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> audioContext.</span><span style="color:#A6E22E;">createOscillator</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">carrier.frequency.value </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> carrierFrequency;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> envelop </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> audioContext.</span><span style="color:#A6E22E;">createGain</span><span style="color:#F8F8F2;">();</span></span>
<span class="line diff add"><span style="color:#F8F8F2;">envelop.gain.value </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> amDepth </span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">; </span><span style="color:#88846F;">// set to the offset we want (i.e. 0.5) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// connect them all together</span></span>
<span class="line"><span style="color:#F8F8F2;">carrier.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(envelop)</span></span>
<span class="line"><span style="color:#F8F8F2;">envelop.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(audioContext.destination);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// modulating branch</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> modulator </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> audioContext.</span><span style="color:#A6E22E;">createOscillator</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">modulator.frequency.value </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> amFrequency;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> depth </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> audioContext.</span><span style="color:#A6E22E;">createGain</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">depth.gain.value </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> amDepth </span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">modulator.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(depth); </span><span style="color:#88846F;">// signal between [-0.5, 0.5]</span></span>
<span class="line diff add"><span style="color:#F8F8F2;">depth.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(envelop.gain); </span><span style="color:#88846F;">// adds our scaled signal with audio param signal </span></span></code></pre></div><p>You reload the page now, you should ear a simple tremolo at 2Hz applied to the carrier frequency at 200Hz.</p>`,55),u=["src"],m=a(`<p>Congrats, you have written your first little synthesizer!</p><h2 id="create-the-user-interface" tabindex="-1">Create the user interface <a class="header-anchor" href="#create-the-user-interface" aria-label="Permalink to &quot;Create the user interface&quot;">​</a></h2><p>Now that the guts of our synthsizer is ready, let&#39;s create the user interface that will allow to manipulate its different params, i.e. <code>amDepth</code>, <code>amFrequency</code>, <code>carrierFrequency</code>.</p><p>To that end we will use the two libraries that are imported on the top of our file:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { html, render } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;https://unpkg.com/lit-html&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;https://unpkg.com/@ircam/sc-components@latest&#39;</span><span style="color:#F8F8F2;">;</span></span></code></pre></div><p>The first one, the <a href="https://lit.dev/" target="_blank" rel="noreferrer"><code>lit</code></a> library is what is called a template engine. Without going into detail, let&#39;s consider this library allows us to write our HTML code in a simple manner directly from the JavaScript, e.g. the following lines in our <code>main.js</code> file:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">render</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">html</span><span style="color:#E6DB74;">\`</span></span>
<span class="line"><span style="color:#E6DB74;">  &lt;h1&gt;03-amplitude-modulation&lt;/h1&gt;</span></span>
<span class="line"><span style="color:#E6DB74;">\`</span><span style="color:#F8F8F2;">, document.body);</span></span></code></pre></div><p>are the one that created the <code>&lt;h1&gt;</code> tag that we can use in the browser since the beginning of this tutorial:</p><p><img src="`+F+`" alt="lit-tittle"></p><p>The second library, <a href="https://ircam-ismm.github.io/sc-components/" target="_blank" rel="noreferrer"><code>@ircam/sc-components</code></a>, is a library that provide high-level graphical components for rapid prototyping audio application (...which interestingly seems to be perfect for us)</p><p>Let&#39;s first add some code and interface so that we can control our carrier frequency:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#A6E22E;">render</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">html</span><span style="color:#E6DB74;">\`</span></span>
<span class="line"><span style="color:#E6DB74;">  &lt;h1&gt;03-amplitude-modulation&lt;/h1&gt;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">  &lt;div&gt;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">    &lt;sc-text&gt;carrier frequency&lt;/sc-text&gt;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">    &lt;sc-slider</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">      min=&quot;20&quot;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">      max=&quot;5000&quot;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">      step=&quot;1&quot;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">      number-box</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">      value=</span><span style="color:#F92672;">\${</span><span style="color:#F8F8F2;">carrierFrequency</span><span style="color:#F92672;">}</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">      @input=</span><span style="color:#F92672;">\${</span><span style="color:#FD971F;font-style:italic;">e</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> { carrier.frequency.value </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> e.detail.value; } </span><span style="color:#F92672;">}</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">    &gt;&lt;/sc-slider&gt;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">  &lt;/div&gt;</span></span>
<span class="line"><span style="color:#E6DB74;">\`</span><span style="color:#F8F8F2;">, document.body);</span></span></code></pre></div><p>If you reload, you should now see a nice slider allowing you to control the frequency of the carrier oscillator:</p><p><img src="`+y+`" alt="gui-carrier"></p><p>Second, let&#39;s add another slider to control the modulation frequency:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#A6E22E;">render</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">html</span><span style="color:#E6DB74;">\`</span></span>
<span class="line"><span style="color:#E6DB74;">  &lt;h1&gt;03-amplitude-modulation&lt;/h1&gt;</span></span>
<span class="line"><span style="color:#E6DB74;">  &lt;div&gt;</span></span>
<span class="line"><span style="color:#E6DB74;">    &lt;sc-text&gt;carrier frequency&lt;/sc-text&gt;</span></span>
<span class="line"><span style="color:#E6DB74;">    &lt;sc-slider</span></span>
<span class="line"><span style="color:#E6DB74;">      min=&quot;20&quot;</span></span>
<span class="line"><span style="color:#E6DB74;">      max=&quot;5000&quot;</span></span>
<span class="line"><span style="color:#E6DB74;">      step=&quot;1&quot;</span></span>
<span class="line"><span style="color:#E6DB74;">      number-box</span></span>
<span class="line"><span style="color:#E6DB74;">      value=</span><span style="color:#F92672;">\${</span><span style="color:#F8F8F2;">carrierFrequency</span><span style="color:#F92672;">}</span></span>
<span class="line"><span style="color:#E6DB74;">      @input=</span><span style="color:#F92672;">\${</span><span style="color:#FD971F;font-style:italic;">e</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> { carrier.frequency.value </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> e.detail.value; } </span><span style="color:#F92672;">}</span></span>
<span class="line"><span style="color:#E6DB74;">    &gt;&lt;/sc-slider&gt;</span></span>
<span class="line"><span style="color:#E6DB74;">  &lt;/div&gt;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">  &lt;div&gt;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">    &lt;sc-text&gt;modulator frequency&lt;/sc-text&gt;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">    &lt;sc-slider</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">      min=&quot;20&quot;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">      max=&quot;5000&quot;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">      step=&quot;1&quot;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">      number-box</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">      value=</span><span style="color:#F92672;">\${</span><span style="color:#F8F8F2;">amFrequency</span><span style="color:#F92672;">}</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">      @input=</span><span style="color:#F92672;">\${</span><span style="color:#FD971F;font-style:italic;">e</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> { modulator.frequency.value </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> e.detail.value; } </span><span style="color:#F92672;">}</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">    &gt;&lt;/sc-slider&gt;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">  &lt;/div&gt;</span></span>
<span class="line"><span style="color:#E6DB74;">\`</span><span style="color:#F8F8F2;">, document.body);</span></span></code></pre></div><p>Now things start to get more interesting, as you can already explore the large number of sounds such a simple synthesizer can produce!</p><p><img src="`+d+'" alt="gui-modulator"></p><h2 id="going-further" tabindex="-1">Going further <a class="header-anchor" href="#going-further" aria-label="Permalink to &quot;Going further&quot;">​</a></h2><p>As an exercise, we let you add the last control over the AM depth. This last control is a bit more complex as it will have to update both <code>envelop.gain</code> and <code>depth.gain</code> so that the sum of the two signal always has a max value of one (...all the necessary informations are present in the tutorial to do it properly).</p><p>Another interesting execise could be to implement a Frequency Modulation synthesizer, which rely on the same concepts as the one developed in this tutorial.</p><h2 id="conclusion" tabindex="-1">Conclusion <a class="header-anchor" href="#conclusion" aria-label="Permalink to &quot;Conclusion&quot;">​</a></h2><p>In this tutorial, you have learned how to build more complex audio graph where a signal modulate the parameter of another node (see also FM synthesis). Along the way we have used a more advanced tool to scaffold our application, and libraries to help us create interfaces in a more simple manner.</p><p>In the next tutorial, we will learn some concept of object oriented programming and encapsulation, which will help us to organize our code and to create reusable audio components.</p>',24),D=JSON.parse('{"title":"Amplitude Modulation Synthesis","description":"","frontmatter":{},"headers":[],"relativePath":"basics/amplitude-modulation-synthesis.md","filePath":"basics/amplitude-modulation-synthesis.md"}'),g={name:"basics/amplitude-modulation-synthesis.md"},A=Object.assign(g,{setup(f){return(E,b)=>(n(),o("div",null,[h,s("p",null,[s("audio",{controls:"",loop:"",src:e(l)("/static-assets/am-tremolo-2hz.m4a")},null,8,u)]),m]))}});export{D as __pageData,A as default};
