import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.9f45b8e0.js";const h=JSON.parse('{"title":"Encapsulating Logic","description":"","frontmatter":{},"headers":[],"relativePath":"basics/encapsulating-logic.md","filePath":"basics/encapsulating-logic.md"}'),o={name:"basics/encapsulating-logic.md"},e=l(`<h1 id="encapsulating-logic" tabindex="-1">Encapsulating Logic <a class="header-anchor" href="#encapsulating-logic" aria-label="Permalink to &quot;Encapsulating Logic&quot;">​</a></h1><p>In this tutorial, we will step aside a bit from the Web Audio API to review how we can encapsulate common logic to simplify code, share functionalities and organize applications. Of course, this is a very large and important topic on its own, and this is not the goal of these tutorials to go deep with subjects such as <a href="https://www.google.com/search?q=javascript+design+patterns" target="_blank" rel="noreferrer">design patterns</a>, etc.</p><p>Instead, we will only review the most common concepts and features the language proposes and that we have already met in previous tutorials.</p><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><p>The most simple way to encapsulate logic is to use functions. We have already seen and used functions in the previous tutorials, but let&#39;s just review how we can declare and use them.</p><p>Let&#39;s take a contrived example and pretend that at several points of our code we need to compute the mean of a list of numbers, e.g.:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// need to compute the mean of this list of 3 elements</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> myFirstList </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> sum </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">; i </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">; i</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    sum </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> myFirstList[i];</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> mean1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> sum </span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// .... later</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// need to compute the mean of this list of 4 elements</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> mySecondList </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1.2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2.1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3.6</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4.2</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> sum </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">; i </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">; i</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    sum </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> mySecondList[i];</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> mean2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> sum </span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">;</span></span></code></pre></div><p>We can see some issues with this how this code is written: many things are repeated and hard coded, which makes it fragile and hard to maintain. Indeed, what if for some reason the size of the lists changes? If instead of the mean, we finally want to retrieve the median value? If you find a bug in the mean computation and then must change your code everywhere? etc.</p><p>To simplify that and make the code more abstract, we can just create a more generic function. With a simple function takes a list of unknown size as argument and returns the mean, we can then rewrite our code as the following:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">computeMean</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">list</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// instead of hardcoding the list size, we just use its \`length\`\` attribute</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> size </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> list.length;</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> sum </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (i </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">; i </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> size; i</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        sum </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> list[i];</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> sum </span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;"> size;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> myFirstList </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> mean1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">computeMean</span><span style="color:#F8F8F2;">(myFirstList);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> mySecondList </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1.2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2.1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3.6</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4.2</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> mean2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">computeMean</span><span style="color:#F8F8F2;">(mySecondList);</span></span></code></pre></div><h3 id="function-syntax" tabindex="-1">Function syntax <a class="header-anchor" href="#function-syntax" aria-label="Permalink to &quot;Function syntax&quot;">​</a></h3><p>As already seen earlier in these tutorials, functions in JavaScript can be written with several syntax:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// Named function</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">add</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">a</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">b</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> b;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// Anonymous function stored into a variable called \`add\`</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">add</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">a</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">b</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> b;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// Arrow functions stored into a variable called \`add\`.</span></span>
<span class="line"><span style="color:#88846F;">// Arrow functions are often used nowadays because they solve </span></span>
<span class="line"><span style="color:#88846F;">// some counter intuitive characteristics of &quot;regular&quot; functions</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">add</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">a</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">b</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> b;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// When written on one line, arrow functions can also be written</span></span>
<span class="line"><span style="color:#88846F;">// without the brackets and the \`return\` statement, </span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">add</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">a</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">b</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> b;</span></span>
<span class="line"><span style="color:#88846F;">// This can be useful in some specific situations, e.g.:</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> result </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">    .</span><span style="color:#A6E22E;">filter</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">item</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> item </span><span style="color:#F92672;">%</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// keep only even numbers</span></span>
<span class="line"><span style="color:#F8F8F2;">    .</span><span style="color:#A6E22E;">map</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">item</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> item </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// multiply each item by 3</span></span>
<span class="line"><span style="color:#88846F;">// &gt; [6, 12]</span></span></code></pre></div><h2 id="classes" tabindex="-1">Classes <a class="header-anchor" href="#classes" aria-label="Permalink to &quot;Classes&quot;">​</a></h2><p>Classes are higher-level and more abstract than function. They allow to put together some data and related logic into a common abstraction. Using classes, you can create several <strong><em>instances</em></strong> of the same object at the same time and manipulate them in a generic way.</p><p>Just as with function, we have already seen several manifestations of classes in these tutorials. Indeed, the <code>AudioContext</code> is a class, as well as all <code>AudioNode</code>s and <code>AudioParam</code>s we have used so far are instances of generic classes.</p><p>Let&#39;s see how we can declare a class, which represent a person with a name and an age:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Person</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// this is the method that is called when a &quot;new&quot; Person instance is created</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">constructor</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">age</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#88846F;">// the keyword \`this\` represent the current instance</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.name </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> name;</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#88846F;">// a value that is bound to a class is called an &quot;attribute&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.age </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> age;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// a function that is bound to a class is called a &quot;method&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">sayHello</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">\`Hello my name is &quot;</span><span style="color:#F92672;">\${</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.name</span><span style="color:#F92672;">}</span><span style="color:#E6DB74;">&quot;\`</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">celebrateBirthday</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#88846F;">// increment the Person instance age by 1 and celebrate</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.age </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">\`</span><span style="color:#F92672;">\${</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">sayHello</span><span style="color:#F8F8F2;">()</span><span style="color:#F92672;">}</span><span style="color:#E6DB74;">, I&#39;m now </span><span style="color:#F92672;">\${</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.age</span><span style="color:#F92672;">}</span><span style="color:#E6DB74;"> years old\`</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre></div><p>From this class declaration (you can think of it as a kind of blueprint), you can create several person using the <code>new</code> keyword:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// create two &quot;Person&quot; instances</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> niap </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Person</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;niap&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> hiho </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Person</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;hiho&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">12</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// each of them can say hello</span></span>
<span class="line"><span style="color:#F8F8F2;">niap.</span><span style="color:#A6E22E;">sayHello</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#88846F;">// &gt; Hello my name is &quot;niap&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">hiho.</span><span style="color:#A6E22E;">sayHello</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#88846F;">// &gt; Hello my name is &quot;hiho&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// each of them can celebrate their birthday</span></span>
<span class="line"><span style="color:#F8F8F2;">niap.</span><span style="color:#A6E22E;">celebrateBirthday</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#88846F;">// &gt; Hello my name is &quot;niap&quot;, I&#39;m now 6 years old</span></span>
<span class="line"><span style="color:#F8F8F2;">hiho.</span><span style="color:#A6E22E;">celebrateBirthday</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#88846F;">// &gt; Hello my name is &quot;hiho&quot;, I&#39;m now 13 years old</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>At this point, you can wonder why we said that <code>AudioNode</code>s, such as the <code>OscillatorNode</code> we created in previous tutorials are instance of classes, as we never created them using the <code>new</code> keyword. This is the manifestation of a common design pattern called the <strong><em>factory pattern</em></strong> which delegates to a class instance the ability to create other class instance:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">AudioContext</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// ...</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">createOscillator</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">OscillatorNode</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre></div><p>We will see in later tutorials that this is also possible to explicitly create <code>AudioNode</code>s using the <code>new</code> keyword:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> osc </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">OscillatorNode</span><span style="color:#F8F8F2;">(audioContext, options);</span></span></code></pre></div></div><h2 id="modules" tabindex="-1">Modules <a class="header-anchor" href="#modules" aria-label="Permalink to &quot;Modules&quot;">​</a></h2><p>The last way we have seen so far to clean our code further was to use &quot;modules&quot;, which are even higher-level than classes. Once again, we will use a very contrived example that will allow us to focus on the syntax and general logic, rather than on specific functionality and implementation detail.</p><p>Let&#39;s imagine we need to increment and decrement a counter in some part of our application, and that another part of the application needs to monitor the current value of the counter for some reason. One possibility is to create a module file, e.g. <code>counter.js</code>, which declares and exports three functions:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// counter.js</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// This variable is &quot;private&quot; to the module because it is not</span></span>
<span class="line"><span style="color:#88846F;">// exposed with the \`export\` keyword</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> counter </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// increment the counter when called</span></span>
<span class="line"><span style="color:#F92672;">export</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">increment</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  counter </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">// decrement the counter when called</span></span>
<span class="line"><span style="color:#F92672;">export</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">decrement</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  counter </span><span style="color:#F92672;">-=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">// retrieve the current value of the counter</span></span>
<span class="line"><span style="color:#F92672;">export</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">getCurrent</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> counter;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre></div><p>Then, two separate modules of our application can import the module and use its exposed methods. For example, one part could react to some user clicking on &#39;+&#39; or &#39;-&#39; buttons:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// file: a.js</span></span>
<span class="line"><span style="color:#88846F;">// import only the \`increment\` and \`decrement\` functions from counter</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { increment, decrement } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;./counter.js&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">myPlusButton.</span><span style="color:#A6E22E;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;click&#39;</span><span style="color:#F8F8F2;">, increment);</span></span>
<span class="line"><span style="color:#F8F8F2;">myMinusButton.</span><span style="color:#A6E22E;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;click&#39;</span><span style="color:#F8F8F2;">, decrement);</span></span></code></pre></div><p>While a second part could refresh itself every second to display the current value of the counter, disregarding any user events:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// file: b.js</span></span>
<span class="line"><span style="color:#88846F;">// import only the \`getCurrent\` function from counter</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { getCurrent } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;./counter.js&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// pick the current value of the counter every second</span></span>
<span class="line"><span style="color:#88846F;">// and display it somehow</span></span>
<span class="line"><span style="color:#A6E22E;">setInterval</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> currentCounterValue </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">getCurrent</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">displaySomehow</span><span style="color:#F8F8F2;">(currentCounterValue);</span></span>
<span class="line"><span style="color:#F8F8F2;">}, </span><span style="color:#AE81FF;">1000</span><span style="color:#F8F8F2;">);</span></span></code></pre></div><p>Interestingly, while <code>a.js</code> and <code>b.js</code> are both dependant from <code>counter.js</code>, they are also quite isolated from each other, <code>b.js</code> does not have to know anything about <code>a.js</code> and vice versa. Such isolation is generally interesting as it makes it safer to modify one part without any impact on the other.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The module syntax has been standardized relatively recently in JavaScript. As such, this syntax might not work in older Web browser. Different solutions, called <strong><em>bundlers</em></strong>, exist to work around this issue (cf. <a href="https://esbuild.github.io/" target="_blank" rel="noreferrer"><code>esbuild</code></a> or <a href="https://webpack.js.org/" target="_blank" rel="noreferrer"><code>webpack</code></a>).</p><p>In these tutorial, we will stick to not using such tools and assume you work with a decently modern and up-to-date Web browser.</p></div><h2 id="conclusion" tabindex="-1">Conclusion <a class="header-anchor" href="#conclusion" aria-label="Permalink to &quot;Conclusion&quot;">​</a></h2><p>Now that we have accomplished this short refresher on the encapsulation patterns we have seen so far, let&#39;s use them in a more hands-on manner by implementing a custom effect, a feedback delay, in such way that you will able to reuse it in several applications.</p>`,33),p=[e];function t(c,F,r,i,y,d){return n(),a("div",null,p)}const m=s(o,[["render",t]]);export{h as __pageData,m as default};
