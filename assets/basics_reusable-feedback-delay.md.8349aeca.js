import{o as l,c as o,k as a,l as n,Q as s,f as e}from"./chunks/framework.9f45b8e0.js";const p="/webaudio-tutorials/assets/instance-created.5f7cc8b5.png",t="/webaudio-tutorials/assets/graph-outer.3f80c985.png",c="/webaudio-tutorials/assets/graph-inner.7fed62c9.png",F="/webaudio-tutorials/assets/gui.85171e40.png",r=s(`<h1 id="implementing-a-reusable-feedback-delay" tabindex="-1">Implementing a Reusable Feedback Delay <a class="header-anchor" href="#implementing-a-reusable-feedback-delay" aria-label="Permalink to &quot;Implementing a Reusable Feedback Delay&quot;">​</a></h1><p>In this tutorial, we will build on top of the patterns we just reviewed to build a reusable feedback delay effect.</p><h3 id="related-documentation" tabindex="-1">Related Documentation <a class="header-anchor" href="#related-documentation" aria-label="Permalink to &quot;Related Documentation&quot;">​</a></h3><ul><li><a href="https://developer.mozilla.org/docs/Web/API/setInterval" target="_blank" rel="noreferrer"><code>setInterval</code></a></li><li><a href="https://developer.mozilla.org/docs/Web/API/DelayNode" target="_blank" rel="noreferrer"><code>DelayNode</code></a></li><li><a href="https://developer.mozilla.org/docs/Web/API/AudioParam/setTargetAtTime" target="_blank" rel="noreferrer"><code>setTargetAtTime</code></a></li></ul><h2 id="scaffolding-project" tabindex="-1">Scaffolding project <a class="header-anchor" href="#scaffolding-project" aria-label="Permalink to &quot;Scaffolding project&quot;">​</a></h2><p>First things first, let&#39;s create a new project using the <code>@ircam/create</code> command. Open a <code>Terminal</code> and write de following commands</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;">cd</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">~/Desktop/webaudio-tutorials</span></span>
<span class="line"><span style="color:#A6E22E;">npx</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">@ircam/create@latest</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">04</span><span style="color:#E6DB74;">-feedback-delay</span></span>
<span class="line"><span style="color:#66D9EF;">cd</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">04</span><span style="color:#E6DB74;">-feedback-delay</span></span>
<span class="line"><span style="color:#A6E22E;">npx</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">serve</span></span></code></pre></div><p>Then open the <code>04-feedback-delay</code> directory in your text editor</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>If you are wondering what&#39;s going on here, please check the more detailled step by step guide <a href="./amplitude-modulation-synthesis.html#scaffold-the-project-automatically">here</a></p></div><h2 id="trigger-source-at-regular-interval" tabindex="-1">Trigger source at regular interval <a class="header-anchor" href="#trigger-source-at-regular-interval" aria-label="Permalink to &quot;Trigger source at regular interval&quot;">​</a></h2><p>To test our feeback delay, let&#39;s create some source triggered at regular interval. Fortunately, the default project we just created already provides us an <code>AudioBuffer</code> which will be perfect to that end.</p><p>Then, let&#39;s just modify the code so that instead of having to manually trigger the source, it is triggered automatically at a a regular interval, for example every second.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-diff"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { html, render } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;https://unpkg.com/lit-html&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;https://unpkg.com/@ircam/sc-components@latest&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> resumeAudioContext </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;./lib/resume-audio-context.js&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> loadAudioBuffer </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;./lib/load-audio-buffer.js&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> audioContext </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">AudioContext</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">resumeAudioContext</span><span style="color:#F8F8F2;">(audioContext);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> buffer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">loadAudioBuffer</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;./assets/sample.wav&#39;</span><span style="color:#F8F8F2;">, audioContext.sampleRate);</span></span>
<span class="line"></span>
<span class="line diff add"><span style="color:#A6E22E;">setInterval</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> { </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> src </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> audioContext.</span><span style="color:#A6E22E;">createBufferSource</span><span style="color:#F8F8F2;">(); </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">    src.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(audioContext.destination); </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">    src.buffer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> buffer; </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">    src.</span><span style="color:#A6E22E;">start</span><span style="color:#F8F8F2;">(); </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">}, </span><span style="color:#AE81FF;">1000</span><span style="color:#F8F8F2;">); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E;">render</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">html</span><span style="color:#E6DB74;">\`</span></span>
<span class="line"><span style="color:#E6DB74;">  &lt;h1&gt;04-feedback-delay&lt;/h1&gt;</span></span>
<span class="line diff remove"><span style="color:#E6DB74;">  &lt;sc-bang </span></span>
<span class="line diff remove"><span style="color:#E6DB74;">    @input=</span><span style="color:#F92672;">\${</span><span style="color:#FD971F;font-style:italic;">e</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> { </span></span>
<span class="line diff remove"><span style="color:#F8F8F2;">      </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> src </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> audioContext.</span><span style="color:#A6E22E;">createBufferSource</span><span style="color:#F8F8F2;">(); </span></span>
<span class="line diff remove"><span style="color:#F8F8F2;">      src.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(audioContext.destination); </span></span>
<span class="line diff remove"><span style="color:#F8F8F2;">      src.buffer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> buffer; </span></span>
<span class="line diff remove"><span style="color:#F8F8F2;">      src.</span><span style="color:#A6E22E;">start</span><span style="color:#F8F8F2;">(); </span></span>
<span class="line diff remove"><span style="color:#F8F8F2;">    }</span><span style="color:#F92672;">}</span><span style="color:#E6DB74;"> </span></span>
<span class="line diff remove"><span style="color:#E6DB74;">  &gt;&lt;/sc-bang&gt; </span></span>
<span class="line"><span style="color:#E6DB74;">\`</span><span style="color:#F8F8F2;">, document.body);</span></span></code></pre></div><p>If you reload the page you should now ear the following:</p>`,14),i=["src"],y=s(`<h2 id="create-a-module-for-the-feedbackdelay-class" tabindex="-1">Create a module for the FeedbackDelay class <a class="header-anchor" href="#create-a-module-for-the-feedbackdelay-class" aria-label="Permalink to &quot;Create a module for the FeedbackDelay class&quot;">​</a></h2><p>To implement our <code>FeedbackDelay</code>, we will create a new module that we will import into our <code>main.js</code> file. Create a new file called <code>FeedbackDelay.js</code> inside the <code>lib</code> directory:</p><div class="language-md"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#F8F8F2;">04-feedback-delay</span></span>
<span class="line"><span style="color:#F8F8F2;">├── assets              </span></span>
<span class="line"><span style="color:#F8F8F2;">├── lib                 </span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">│   ├── FeedbackDelay.js</span></span>
<span class="line"><span style="color:#F8F8F2;">│   ├── load-audio-buffer.js</span></span>
<span class="line"><span style="color:#F8F8F2;">│   └── resume-audio-context.js</span></span>
<span class="line"><span style="color:#F8F8F2;">├── index.html</span></span>
<span class="line"><span style="color:#F8F8F2;">├── main.js</span></span>
<span class="line"><span style="color:#F8F8F2;">├── README.md</span></span>
<span class="line"><span style="color:#F8F8F2;">└── styles.css</span></span></code></pre></div><p>And write the basic structure of the class and export it as default export:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// ./lib/FeedbackDelay.js</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">FeedbackDelay</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">constructor</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;FeedbackDelay created!&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">export</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">default</span><span style="color:#F8F8F2;"> FeedbackDelay;</span></span></code></pre></div><p>Then, let&#39;s import our newly created <code>FeedbackDelay</code> class into the <code>main.js</code> file and create a new instance to check that everything works as expected:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#88846F;">// main.js</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> resumeAudioContext </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;./lib/resume-audio-context.js&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> loadAudioBuffer </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;./lib/load-audio-buffer.js&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line highlighted"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> FeedbackDelay </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;./lib/FeedbackDelay.js&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> audioContext </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">AudioContext</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">resumeAudioContext</span><span style="color:#F8F8F2;">(audioContext);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> buffer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">loadAudioBuffer</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;./assets/sample.wav&#39;</span><span style="color:#F8F8F2;">, audioContext.sampleRate);</span></span>
<span class="line highlighted"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> delay </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">FeedbackDelay</span><span style="color:#F8F8F2;">();</span></span></code></pre></div><p>If you reload the page, you should see the log appear from the <code>FeedbackDelay</code> constructor in the console:</p><p><img src="`+p+`" alt="instance-created"></p><p>Before going into the implementation of the actual audio graph of the delay, we can already see an issue with our code. Our feedback delay will very probably have to create some nodes to process the audio stream, but our <code>AudioContext</code> only lives in the <code>main.js</code> &quot;context&quot;.</p><p>Let&#39;s just fix that by passing our resumed <code>AudioContext</code> to the <code>FeedbackDelay</code> when we instantiate it. And while we are here, let&#39;s pass it also an object as second argument that will allow us to configure it later:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-diff"><code><span class="line"><span style="color:#88846F;">// main.js</span></span>
<span class="line diff remove"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> delay </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">FeedbackDelay</span><span style="color:#F8F8F2;">(); </span></span>
<span class="line diff add"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> delay </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">FeedbackDelay</span><span style="color:#F8F8F2;">(audioContext, {}); </span></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-diff"><code><span class="line"><span style="color:#88846F;">// ./lib/FeedbackDelay.js</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">FeedbackDelay</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">constructor</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">audioContext</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">options</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {}) {</span></span>
<span class="line diff remove"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;FeedbackDelay created!&#39;</span><span style="color:#F8F8F2;">); </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// store the audioContext instance inside the FeedbackDelay instance </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.audioContext </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> audioContext; </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// prepare logic for handling configuration options </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.options </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#A6E22E;">assign</span><span style="color:#F8F8F2;">({}, options); </span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre></div><h2 id="connecting-to-the-audio-graph" tabindex="-1">Connecting to the audio graph <a class="header-anchor" href="#connecting-to-the-audio-graph" aria-label="Permalink to &quot;Connecting to the audio graph&quot;">​</a></h2><p>So far so good, we have our <code>FeedbackDelay</code> instance created, by it is not yet inserted into our audio graph. Indeed, for now our <code>AudioBufferSourceNode</code> is directly connected to the <code>destination</code>, while we would like connect it to our delay, which itself should be connected to the destination, such as:</p><p><img src="`+t+`" alt="graph-outer"></p><p>As our <code>FeedbackDelay</code> is not a full featured native <code>AudioNode</code>, let&#39;s consider it will expose two <code>AudioNode</code> attributes, which we will be called <code>input</code> and <code>output</code>, to which native <code>AudioNode</code> can connect, or on which they can be connected.</p><p>So, let&#39;s start by modifying our <code>main.js</code> file to insert our feedback delay between the source and the destination:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-diff"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> buffer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">loadAudioBuffer</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;./assets/sample.wav&#39;</span><span style="color:#F8F8F2;">, audioContext.sampleRate);</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> delay </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">FeedbackDelay</span><span style="color:#F8F8F2;">(audioContext, {});</span></span>
<span class="line diff add"><span style="color:#F8F8F2;">delay.output.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(audioContext.destination); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E;">setInterval</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> src </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> audioContext.</span><span style="color:#A6E22E;">createBufferSource</span><span style="color:#F8F8F2;">();</span></span>
<span class="line diff remove"><span style="color:#F8F8F2;">    src.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(audioContext.destination); </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">    src.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(delay.input); </span></span>
<span class="line"><span style="color:#F8F8F2;">    src.buffer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> buffer;</span></span>
<span class="line"><span style="color:#F8F8F2;">    src.</span><span style="color:#A6E22E;">start</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">}, </span><span style="color:#AE81FF;">1000</span><span style="color:#F8F8F2;">);</span></span></code></pre></div><p>Of course if you try to reload now, you will run into the following error</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">Uncaught TypeError: Cannot read properties of undefined (reading &#39;connect&#39;)</span></span></code></pre></div><p>Indeed, the line:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// main.js</span></span>
<span class="line"><span style="color:#F8F8F2;">delay.output.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(audioContext.destination);</span></span></code></pre></div><p>tries to call some <code>connect</code> method on something that is not defined into our <code>FeedbackDelay</code> class. So let&#39;s fix this issue, by creating the <code>input</code> and <code>output</code> nodes of our <code>FeedbackDelay</code>:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// ./lib/FeedbackDelay.js</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">FeedbackDelay</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">constructor</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">audioContext</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">options</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {}) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// store the audioContext instance inside the FeedbackDelay instance</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.audioContext </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> audioContext;</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// prepare logic for handling configuration options</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.options </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#A6E22E;">assign</span><span style="color:#F8F8F2;">({}, options);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.input </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.audioContext.</span><span style="color:#A6E22E;">createGain</span><span style="color:#F8F8F2;">(); </span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.output </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.audioContext.</span><span style="color:#A6E22E;">createGain</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre></div><p>Ok, now that our <code>FeedbackDelay</code> expose an <code>input</code> and an <code>output</code> attribute, which are both <code>AudioNode</code>, the code should not complain anymore. Then, if you reload your page, you should see that all errors disappeared.</p><p>But all sound as well... This is because inside our <code>FeedbackDelay</code> class the <code>input</code> and <code>output</code> are not connected together. Let&#39;s fix that with implementing our feedback delay for good.</p><h2 id="implement-the-internal-audio-graph" tabindex="-1">Implement the internal audio graph <a class="header-anchor" href="#implement-the-internal-audio-graph" aria-label="Permalink to &quot;Implement the internal audio graph&quot;">​</a></h2><p>The internal graph of our <code>FeedbackDelay</code> will look like the following, with direct connection between the input and output to propagate the direct signal, and branch containing the delay itself with its feedback loop.</p><p><img src="`+c+`" alt="graph-inner"></p><p>Let&#39;s thus implement this graph into our <code>FeedbackDelay</code> class:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#88846F;">// ./lib/FeedbackDelay.js</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">FeedbackDelay</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">constructor</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">audioContext</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">options</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {}) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// store the audioContext instance inside the FeedbackDelay instance</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.audioContext </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> audioContext;</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// define default parameter values that can be overriden with options</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.options </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#A6E22E;">assign</span><span style="color:#F8F8F2;">({</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">      preGain: </span><span style="color:#AE81FF;">0.7</span><span style="color:#F8F8F2;">,</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">      delayTime: </span><span style="color:#AE81FF;">0.2</span><span style="color:#F8F8F2;">,</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">      feedback: </span><span style="color:#AE81FF;">0.8</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    }, options);</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">/* Setup audio nodes */</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// input / ouput node</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.input </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.audioContext.</span><span style="color:#A6E22E;">createGain</span><span style="color:#F8F8F2;">();</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.output </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.audioContext.</span><span style="color:#A6E22E;">createGain</span><span style="color:#F8F8F2;">();</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// feedback loop nodes</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.preGain </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.audioContext.</span><span style="color:#A6E22E;">createGain</span><span style="color:#F8F8F2;">();</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.preGain.gain.value </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.options.preGain;</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.delay </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.audioContext.</span><span style="color:#A6E22E;">createDelay</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">); </span><span style="color:#88846F;">// &quot;1&quot; is the maximum delay time</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.delay.delayTime.value </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.options.delayTime;</span></span>
<span class="line highlighted"><wbr></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.feedback </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.audioContext.</span><span style="color:#A6E22E;">createGain</span><span style="color:#F8F8F2;">();</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.feedback.gain.value </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.options.feedback;</span></span>
<span class="line highlighted"><wbr></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">/* Setup connections */</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// direct signal</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.input.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.output);</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// direct delay line</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.input.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.preGain);</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.preGain.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.delay);</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.delay.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.output);</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// feedback loop</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.delay.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.feedback);</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.feedback.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.delay);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">export</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">default</span><span style="color:#F8F8F2;"> FeedbackDelay;</span></span></code></pre></div><p>Tada! I you reload now, you will be able to ear the feedback delay line in action:</p>`,33),d=["src"],h=s(`<div class="info custom-block"><p class="custom-block-title">INFO</p><p>You can hear that the overlap between the delay line and a new triggering of a source is not very clean, while it should be as we trigger a new sound every 1s and our <code>delayTime</code> is 0.2s. This is due to how we trigger our source. Indeed using <code>setInterval</code> as we did in first step is generally not a good idea in audio applications as this timer is not precise enough. In the next tutorials we will learn how to overcome such timing issues.</p></div><h2 id="user-interface" tabindex="-1">User interface <a class="header-anchor" href="#user-interface" aria-label="Permalink to &quot;User interface&quot;">​</a></h2><p>Before concluding this tutorial, let&#39;s add some graphical user interface (GUI) to control our feedback delay parameters. First, we will define new methods in our <code>FeedbackDelay</code> class to hide the internals from the main code:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#88846F;">// ./lib/FeedbackDelay.js</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">FeedbackDelay</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">constructor</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">audioContext</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">options</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {}) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// ...</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">setPreGain</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">value</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> timeConstant </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0.01</span><span style="color:#F8F8F2;">;</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> currentTime </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.audioContext.currentTime;</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.preGain.gain.</span><span style="color:#A6E22E;">setTargetAtTime</span><span style="color:#F8F8F2;">(value, currentTime, timeConstant);</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  }</span></span>
<span class="line highlighted"><wbr></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">setFeedback</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">value</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> timeConstant </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0.01</span><span style="color:#F8F8F2;">;</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> currentTime </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.audioContext.currentTime;</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.feedback.gain.</span><span style="color:#A6E22E;">setTargetAtTime</span><span style="color:#F8F8F2;">(value, currentTime, timeConstant);</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  }</span></span>
<span class="line highlighted"><wbr></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">setDelayTime</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">value</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> timeConstant </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0.01</span><span style="color:#F8F8F2;">;</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> currentTime </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.audioContext.currentTime;</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.delay.delayTime.</span><span style="color:#A6E22E;">setTargetAtTime</span><span style="color:#F8F8F2;">(value, currentTime, timeConstant);</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>As you can see, this time we used the <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/setTargetAtTime" target="_blank" rel="noreferrer"><code>setTargetAtTime</code></a> automation method of the <code>AudioParam</code> we want to update. Indeed, using this automation method, instead of <code>param.value = newValue</code> as we did until now, will protect us from discontinuities in the computation of the audio signal, preventings all sorts of click and pops.</p></div><p>Now that everything is ready in our <code>FeedbackDelay</code> class, let&#39;s just create our user interface:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#88846F;">// main.js</span></span>
<span class="line"><span style="color:#A6E22E;">render</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">html</span><span style="color:#E6DB74;">\`</span></span>
<span class="line"><span style="color:#E6DB74;">  &lt;h1&gt;04-feedback-delay&lt;/h1&gt;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">  &lt;div&gt;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">    &lt;sc-text&gt;preGain&lt;/sc-text&gt;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">    &lt;sc-slider</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">      value=</span><span style="color:#F92672;">\${</span><span style="color:#F8F8F2;">delay.options.preGain</span><span style="color:#F92672;">}</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">      @input=</span><span style="color:#F92672;">\${</span><span style="color:#FD971F;font-style:italic;">e</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> delay.</span><span style="color:#A6E22E;">setPreGain</span><span style="color:#F8F8F2;">(e.detail.value)</span><span style="color:#F92672;">}</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">    &gt;&lt;/sc-slider&gt;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">  &lt;/div&gt;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">  &lt;div&gt;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">    &lt;sc-text&gt;feedback&lt;/sc-text&gt;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">    &lt;sc-slider</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">      value=</span><span style="color:#F92672;">\${</span><span style="color:#F8F8F2;">delay.options.feedback</span><span style="color:#F92672;">}</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">      @input=</span><span style="color:#F92672;">\${</span><span style="color:#FD971F;font-style:italic;">e</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> delay.</span><span style="color:#A6E22E;">setFeedback</span><span style="color:#F8F8F2;">(e.detail.value)</span><span style="color:#F92672;">}</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">    &gt;&lt;/sc-slider&gt;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">  &lt;/div&gt;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">  &lt;div&gt;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">    &lt;sc-text&gt;delayTime&lt;/sc-text&gt;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">    &lt;sc-slider</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">      value=</span><span style="color:#F92672;">\${</span><span style="color:#F8F8F2;">delay.options.delayTime</span><span style="color:#F92672;">}</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">      @input=</span><span style="color:#F92672;">\${</span><span style="color:#FD971F;font-style:italic;">e</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> delay.</span><span style="color:#A6E22E;">setDelayTime</span><span style="color:#F8F8F2;">(e.detail.value)</span><span style="color:#F92672;">}</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">    &gt;&lt;/sc-slider&gt;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">  &lt;/div&gt;</span></span>
<span class="line"><span style="color:#E6DB74;">\`</span><span style="color:#F8F8F2;">, document.body);</span></span></code></pre></div><p>And done! If you reload your page, you should now see the interface and should be able to play with the parameters of your feedback delay:</p><p><img src="`+F+'" alt="gui"></p><h2 id="conclusion" tabindex="-1">Conclusion <a class="header-anchor" href="#conclusion" aria-label="Permalink to &quot;Conclusion&quot;">​</a></h2><p>In this tutorial, you have created an abstract and reusable audio effect using JavaScript classes and modules. With such pattern, you can envision reusing this effect in another project very easily by just copy / paste the file and importing it, or even start creating your own library of audio effects!</p><p>In the next tutorials, we will focus on how to fix the issue we have seen with innacuracy of the <code>setInterval</code> during this tutorial. Properly understand this timing issue and how to fix them is a key element to build more advanced synthesis methods and audio applications.</p>',12),E=JSON.parse('{"title":"Implementing a Reusable Feedback Delay","description":"","frontmatter":{},"headers":[],"relativePath":"basics/reusable-feedback-delay.md","filePath":"basics/reusable-feedback-delay.md"}'),u={name:"basics/reusable-feedback-delay.md"},D=Object.assign(u,{setup(g){return(f,m)=>(l(),o("div",null,[r,a("audio",{controls:"",loop:"",src:n(e)("/static-assets/feedback-delay-trigger.m4a")},null,8,i),y,a("audio",{controls:"",loop:"",src:n(e)("/static-assets/feedback-delay-full.m4a")},null,8,d),h]))}});export{E as __pageData,D as default};
