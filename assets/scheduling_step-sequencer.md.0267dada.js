import{o,c as p,k as s,a as e,l as a,Q as n,f as l}from"./chunks/framework.9f45b8e0.js";const F="/webaudio-tutorials/assets/assets.735aeca8.png",t="/webaudio-tutorials/assets/audio-buffers.fcfc3b99.png",c="/webaudio-tutorials/assets/empty-score.1f7bbeb2.png",r="/webaudio-tutorials/assets/matrix.7796b147.png",y=n(`<h1 id="building-a-step-sequencer" tabindex="-1">Building a step sequencer <a class="header-anchor" href="#building-a-step-sequencer" aria-label="Permalink to &quot;Building a step sequencer&quot;">​</a></h1><p>In this third tutorial about scheduling, we will build a simple step sequencer. While we won&#39;t see much more new</p><h3 id="related-documentation" tabindex="-1">Related documentation <a class="header-anchor" href="#related-documentation" aria-label="Permalink to &quot;Related documentation&quot;">​</a></h3><ul><li><a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noreferrer"><code>Array</code></a></li><li><a href="https://developer.mozilla.org/docs/Web/API/StereoPannerNode" target="_blank" rel="noreferrer"><code>StereoPannerNode</code></a></li><li><a href="https://ircam-ismm.github.io/sc-components/sc-matrix" target="_blank" rel="noreferrer"><code>sc-matrix</code></a></li></ul><h2 id="loading-the-sound-files" tabindex="-1">Loading the sound files <a class="header-anchor" href="#loading-the-sound-files" aria-label="Permalink to &quot;Loading the sound files&quot;">​</a></h2><p>Let&#39;s first scaffold and launch a new application:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;">cd</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">~/Desktop/webaudio-tutorials</span></span>
<span class="line"><span style="color:#A6E22E;">npx</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">@ircam/create@latest</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">07</span><span style="color:#E6DB74;">-step-sequencer</span></span>
<span class="line"><span style="color:#66D9EF;">cd</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">07</span><span style="color:#E6DB74;">-step-sequencer</span></span>
<span class="line"><span style="color:#A6E22E;">npx</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">serve</span></span></code></pre></div><p>Then let&#39;s put some samples in the <code>./assets</code> directory.</p>`,8),i={class:"info custom-block"},h=s("p",{class:"custom-block-title"},"INFO",-1),d=["href"],E=n('<p><img src="'+F+`" alt="assets"></p><p>Then let&#39;s load all these files and store them into a list of buffers:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#88846F;">// ./main.js</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> audioContext </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">AudioContext</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">resumeAudioContext</span><span style="color:#F8F8F2;">(audioContext);</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> samples </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  </span><span style="color:#E6DB74;">&#39;./assets/hh.wav&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  </span><span style="color:#E6DB74;">&#39;./assets/clap.wav&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  </span><span style="color:#E6DB74;">&#39;./assets/rimshot.wav&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  </span><span style="color:#E6DB74;">&#39;./assets/snare.wav&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  </span><span style="color:#E6DB74;">&#39;./assets/kick.wav&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">];</span></span>
<span class="line highlighted"><wbr></span>
<span class="line highlighted"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> buffers </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [];</span></span>
<span class="line highlighted"><wbr></span>
<span class="line highlighted"><span style="color:#88846F;">// loop through all our sample pathnames and</span></span>
<span class="line highlighted"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">; i </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> samples.length; i</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> pathname </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> samples[i];</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// load the corresponding audio buffer</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> buffer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">loadAudioBuffer</span><span style="color:#F8F8F2;">(pathname, audioContext.sampleRate);</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// populate the \`buffers\` list with the corresponding buffer</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  buffers[i] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> buffer;</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">}</span></span>
<span class="line highlighted"><wbr></span>
<span class="line highlighted"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(buffers);</span></span></code></pre></div><p>When you reload the page, you should now see the list of the loaded audio buffers logged into the console:</p><p><img src="`+t+`" alt="audio-buffers"></p><h2 id="data-structure-for-the-score" tabindex="-1">Data structure for the score <a class="header-anchor" href="#data-structure-for-the-score" aria-label="Permalink to &quot;Data structure for the score&quot;">​</a></h2><p>Now that our buffers are loaded and ready to use, let&#39;s create a data structure that will contain the &quot;score&quot; of our step sequencer.</p><p>Our score is defined as follow: for each buffer we define a list (i.e. an <code>Array</code>) of values with length equal to the number of steps (e.g. 16) we want, for a given step if the value is <code>0</code> the sound wont be played, and if it is <code>1</code> the sound is played. For example, if the score of the kick track is:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">]</span></span></code></pre></div><p>The kick sample will be played at step 1, 4, 8 and 12.</p><p>Then we can pack the score for each track into a list of tracks, where the index of track score correspond to the index of the buffer in our <code>buffers</code> list:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> score </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">], </span><span style="color:#88846F;">// &quot;hh&quot; track</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">], </span><span style="color:#88846F;">// &quot;clap&quot; track</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">], </span><span style="color:#88846F;">// &quot;rimshot&quot; track</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">], </span><span style="color:#88846F;">// &quot;snare&quot; track</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">], </span><span style="color:#88846F;">// &quot;kick&quot; track</span></span>
<span class="line"><span style="color:#F8F8F2;">]</span></span></code></pre></div><p>Let&#39;s then write the code to initialize our score:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#88846F;">// ./main.js</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(buffers);</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> numTracks </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> buffers.length; </span><span style="color:#88846F;">// one track per audio buffer</span></span>
<span class="line highlighted"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> numSteps </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">16</span><span style="color:#F8F8F2;">; </span><span style="color:#88846F;">// the number of steps per track</span></span>
<span class="line highlighted"><wbr></span>
<span class="line highlighted"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> score </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [];</span></span>
<span class="line highlighted"><span style="color:#88846F;">// create each track and push it into our score</span></span>
<span class="line highlighted"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">; i </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> numTracks; i</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> track </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [];</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// initialize the track with zeros</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> j </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">; j </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> numSteps; j</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    track[j] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  }</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// track is now: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// push it into the score</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  score[i] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> track;</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">}</span></span>
<span class="line highlighted"><wbr></span>
<span class="line highlighted"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(score);</span></span></code></pre></div><p>When reloading the page you should now see the score logged into the console:</p><p><img src="`+c+`" alt="empty-score"></p><h2 id="building-the-track-player" tabindex="-1">Building the track player <a class="header-anchor" href="#building-the-track-player" aria-label="Permalink to &quot;Building the track player&quot;">​</a></h2><p>To develop our audio player, let&#39;s start with importing the scheduler and to temporarily replacing our score with a static one. This will allow us to develop our audio engine without having to create a graphical user interface (GUI) to interact with the score.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#88846F;">// ./main.js</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { html, render } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;https://unpkg.com/lit-html&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line highlighted"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { Scheduler } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;https://unpkg.com/@ircam/sc-scheduling@0.1.6&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;https://unpkg.com/@ircam/sc-components@latest&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// ...</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#88846F;">// const score = [];</span></span>
<span class="line highlighted"><span style="color:#88846F;">// // create each track and push it into our score</span></span>
<span class="line highlighted"><span style="color:#88846F;">// for (let i = 0; i &lt; numTracks; i++) {</span></span>
<span class="line highlighted"><span style="color:#88846F;">//   const track = [];</span></span>
<span class="line highlighted"><span style="color:#88846F;">//   // initialize the track with zeros</span></span>
<span class="line highlighted"><span style="color:#88846F;">//   for (let j = 0; j &lt; numSteps; j++) {</span></span>
<span class="line highlighted"><span style="color:#88846F;">//     track[j] = 0;</span></span>
<span class="line highlighted"><span style="color:#88846F;">//   }</span></span>
<span class="line highlighted"><span style="color:#88846F;">//   // track is now: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]</span></span>
<span class="line highlighted"><span style="color:#88846F;">//   // push it into the score</span></span>
<span class="line highlighted"><span style="color:#88846F;">//   score[i] = track;</span></span>
<span class="line highlighted"><span style="color:#88846F;">// }</span></span>
<span class="line highlighted"><wbr></span>
<span class="line highlighted"><span style="color:#88846F;">// fake score for developping the audio engine</span></span>
<span class="line highlighted"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> score </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    [</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">], </span><span style="color:#88846F;">// &quot;hh&quot; track</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    [</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">], </span><span style="color:#88846F;">// &quot;clap&quot; track</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    [</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">], </span><span style="color:#88846F;">// &quot;rimshot&quot; track</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    [</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">], </span><span style="color:#88846F;">// &quot;snare&quot; track</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">], </span><span style="color:#88846F;">// &quot;kick&quot; track</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">]</span></span>
<span class="line highlighted"><wbr></span>
<span class="line highlighted"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(score);</span></span></code></pre></div><p>Then let&#39;s create our <code>TrackEngine</code> class, this class will be responsible for rendering one single track of our score.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#88846F;">// ./main.js</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(score);</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">TrackEngine</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">constructor</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">audioContext</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">buffer</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">track</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">BPM</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.audioContext </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> audioContext;</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.buffer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> buffer;</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.track </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> track;</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.BPM </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> BPM;</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// current step in the score</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.step </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// ouput node so that we can connect to the outside world</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.output </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.audioContext.</span><span style="color:#A6E22E;">createGain</span><span style="color:#F8F8F2;">();</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// bind the render method so that we don&#39;t loose the context</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.render </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.render.</span><span style="color:#A6E22E;">bind</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">);</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  }</span></span>
<span class="line highlighted"><wbr></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">render</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">currentTime</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// check if the track is active at this given step</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> isActive </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.track[</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.step] </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// if it is active, let&#39;s play the buffer</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (isActive) {</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">      </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> src </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.audioContext.</span><span style="color:#A6E22E;">createBufferSource</span><span style="color:#F8F8F2;">();</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">      src.buffer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.buffer;</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">      src.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.output);</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">      src.</span><span style="color:#A6E22E;">start</span><span style="color:#F8F8F2;">(currentTime);</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    }</span></span>
<span class="line highlighted"><wbr></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// update the current step for next call</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> numSteps </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.track.length;</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.step </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.step </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">%</span><span style="color:#F8F8F2;"> numSteps;</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// return the next time according to the BPM</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> currentTime </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">60</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.BPM;</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">  }</span></span>
<span class="line highlighted"><span style="color:#F8F8F2;">}</span></span></code></pre></div><p>Finally, let&#39;s create our scheduler and instantiate all our tracks:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// ./main.js</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> trackEngines </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []; </span><span style="color:#88846F;">// to store our TrackEngine instances</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> BPM </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">180</span><span style="color:#F8F8F2;">; </span><span style="color:#88846F;">// default BPM</span></span>
<span class="line"><span style="color:#88846F;">// create a scheduler running in audio timeline</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> scheduler </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Scheduler</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;">  audioContext.currentTime);</span></span>
<span class="line"><span style="color:#88846F;">// start all track on the next second</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> startTime </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Math.</span><span style="color:#A6E22E;">ceil</span><span style="color:#F8F8F2;">(audioContext.currentTime);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// for each track in the score</span></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">; i </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> numTracks; i</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// pick buffer and track according to current index</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> buffer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> buffers[i]</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> track </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> score[i];</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// create the track engine and connect it to audio destination</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> trackEngine </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">TrackEngine</span><span style="color:#F8F8F2;">(audioContext, buffer, track, BPM);</span></span>
<span class="line"><span style="color:#F8F8F2;">  trackEngine.output.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(audioContext.destination);</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// add to scheduler and store into the trackEngines list</span></span>
<span class="line"><span style="color:#F8F8F2;">  scheduler.</span><span style="color:#A6E22E;">add</span><span style="color:#F8F8F2;">(trackEngine.render, startTime);</span></span>
<span class="line"><span style="color:#F8F8F2;">  trackEngines.</span><span style="color:#A6E22E;">push</span><span style="color:#F8F8F2;">(trackEngine);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre></div><p>If you reload now, you should now ear this quite nice drum:</p>`,24),u=["src"],g=n(`<h2 id="creating-the-user-interface" tabindex="-1">Creating the user interface <a class="header-anchor" href="#creating-the-user-interface" aria-label="Permalink to &quot;Creating the user interface&quot;">​</a></h2><p>Now that our synthesizer is working let&#39;s create a user interface to be able to interact with our score:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-highlighted-lines"><code><span class="line"><span style="color:#88846F;">// ./main.js</span></span>
<span class="line"><span style="color:#A6E22E;">render</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">html</span><span style="color:#E6DB74;">\`</span></span>
<span class="line"><span style="color:#E6DB74;">  &lt;h1&gt;07-step-sequencer&lt;/h1&gt;</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">  &lt;sc-matrix</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">    .value=</span><span style="color:#F92672;">\${</span><span style="color:#F8F8F2;">score</span><span style="color:#F92672;">}</span></span>
<span class="line highlighted"><span style="color:#E6DB74;">  &gt;&lt;/sc-matrix&gt;</span></span>
<span class="line"><span style="color:#E6DB74;">\`</span><span style="color:#F8F8F2;">, document.body);</span></span></code></pre></div><p>Done 😃</p><p><img src="`+r+`" alt="matrix"></p><p>This works that simply because in JavaScript, <code>Array</code>s are always passed by reference, which means that both the GUI and the <code>TrackEngine</code>s share a reference to the same object. Therefore any change made on the score by the <code>&lt;sc-matric&gt;</code> can automatically be seen by the corresponding <code>TrackEngine</code>.</p><p>Finally, let&#39;s just remove our &quot;fake&quot; score to replace it back with the empty one generated from the code:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-diff"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> numTracks </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> buffers.length; </span><span style="color:#88846F;">// one track per audio buffer</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> numSteps </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">16</span><span style="color:#F8F8F2;">; </span><span style="color:#88846F;">// the number of steps per track</span></span>
<span class="line"></span>
<span class="line diff add"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> score </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []; </span></span>
<span class="line diff add"><span style="color:#88846F;">// create each track and push it into our score </span></span>
<span class="line diff add"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">; i </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> numTracks; i</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">) { </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> track </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []; </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// initialize the track with zeros </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> j </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">; j </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> numSteps; j</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">) { </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">    track[j] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">; </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">  } </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// track is now: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// push it into the score </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">  score[i] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> track; </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">} </span></span>
<span class="line"></span>
<span class="line diff remove"><span style="color:#88846F;">// fake score for developing the audio engine  </span></span>
<span class="line diff remove"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> score </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [ </span></span>
<span class="line diff remove"><span style="color:#F8F8F2;">    [</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">], </span><span style="color:#88846F;">// &quot;hh&quot; track  </span></span>
<span class="line diff remove"><span style="color:#F8F8F2;">    [</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">], </span><span style="color:#88846F;">// &quot;clap&quot; track </span></span>
<span class="line diff remove"><span style="color:#F8F8F2;">    [</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">], </span><span style="color:#88846F;">// &quot;rimshot&quot; track </span></span>
<span class="line diff remove"><span style="color:#F8F8F2;">    [</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">], </span><span style="color:#88846F;">// &quot;snare&quot; track </span></span>
<span class="line diff remove"><span style="color:#F8F8F2;">    [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">], </span><span style="color:#88846F;">// &quot;kick&quot; track </span></span>
<span class="line diff remove"><span style="color:#F8F8F2;">] </span></span>
<span class="line diff remove"><span style="color:#F8F8F2;"> </span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(score);</span></span></code></pre></div><p>Thanks to this dynamic score, if you add a new sample to change the number of steps, all the application will change dynamically without further work (which is quite nice...)</p><h2 id="panning-the-tracks" tabindex="-1">Panning the tracks <a class="header-anchor" href="#panning-the-tracks" aria-label="Permalink to &quot;Panning the tracks&quot;">​</a></h2><p>In this last step, we will just add a stereo panning effect on our tracks to show you how simple it is regarding the architecture of our code.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-diff"><code><span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">; i </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> numTracks; i</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// pick buffer and track according to current index</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> buffer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> buffers[i]</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> track </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> score[i];</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// create the track engine and connect it to audio destination</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> trackEngine </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">TrackEngine</span><span style="color:#F8F8F2;">(audioContext, buffer, track, BPM);</span></span>
<span class="line diff remove"><span style="color:#F8F8F2;">  trackEngine.output.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(audioContext.destination); </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// create a stereo panner node </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> panner </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> audioContext.</span><span style="color:#A6E22E;">createStereoPanner</span><span style="color:#F8F8F2;">(); </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// randomize left (-1) / right (1) for all tracks </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">  panner.pan.value </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Math.</span><span style="color:#A6E22E;">random</span><span style="color:#F8F8F2;">() </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">; </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// connect panner in between trackEngine and destination </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">  trackEngine.output.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(panner); </span></span>
<span class="line diff add"><span style="color:#F8F8F2;">  panner.</span><span style="color:#A6E22E;">connect</span><span style="color:#F8F8F2;">(audioContext.destination); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// add to scheduler and store into the trackEngines list</span></span>
<span class="line"><span style="color:#F8F8F2;">  scheduler.</span><span style="color:#A6E22E;">add</span><span style="color:#F8F8F2;">(trackEngine.render, startTime);</span></span>
<span class="line"><span style="color:#F8F8F2;">  trackEngines.</span><span style="color:#A6E22E;">push</span><span style="color:#F8F8F2;">(trackEngine);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre></div><h2 id="going-further" tabindex="-1">Going further <a class="header-anchor" href="#going-further" aria-label="Permalink to &quot;Going further&quot;">​</a></h2><p>There are several ways you can improve the application, for example you could:</p><ul><li>Add a control for panning each track independently</li><li>Add other effects</li><li>Add a visual feedback to display the current step</li><li>Add some control over the BPM</li><li>Generate a default score according to the number of tracks and number of steps</li></ul><h2 id="conclusion" tabindex="-1">Conclusion <a class="header-anchor" href="#conclusion" aria-label="Permalink to &quot;Conclusion&quot;">​</a></h2><p>In this tutorial, you have learned how to build a simple step sequencer, using some pattern that will allow you to simply make you application evolve.</p><p>This is all for this series on timing and scheduling.</p>`,18),D=JSON.parse('{"title":"Building a step sequencer","description":"","frontmatter":{},"headers":[],"relativePath":"scheduling/step-sequencer.md","filePath":"scheduling/step-sequencer.md"}'),A={name:"scheduling/step-sequencer.md"},w=Object.assign(A,{setup(f){return(k,m)=>(o(),p("div",null,[y,s("div",i,[h,s("p",null,[e("The set of samples used in the tutorial can be downloaded "),s("a",{href:a(l)("/static-assets/step-sequencer-samples.zip")},"here",8,d)])]),E,s("audio",{controls:"",loop:"",src:a(l)("/static-assets/step-sequencer.wav")},null,8,u),g]))}});export{D as __pageData,w as default};
